<?php
/**
 * LinnworksShippingLabelRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LinnworksShippingLabelRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LinnworksShippingLabelRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LinnworksShippingLabelRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
        'authorization_token' => 'string',
        'name' => 'string',
        'company_name' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'address_line3' => 'string',
        'town' => 'string',
        'region' => 'string',
        'country_code' => 'string',
        'delivery_note' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'order_reference' => 'string',
        'order_currency' => 'string',
        'order_value' => 'double',
        'postage_charges' => 'double',
        'service_id' => 'string',
        'packages' => '\Swagger\Client\Model\Package[]',
        'order_extended_properties' => '\Swagger\Client\Model\OrderExtendedProperty[]',
        'service_config_items' => '\Swagger\Client\Model\ServiceConfigItem[]',
        'postalcode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => 'int32',
        'authorization_token' => null,
        'name' => null,
        'company_name' => null,
        'address_line1' => null,
        'address_line2' => null,
        'address_line3' => null,
        'town' => null,
        'region' => null,
        'country_code' => null,
        'delivery_note' => null,
        'email' => null,
        'phone' => null,
        'order_reference' => null,
        'order_currency' => null,
        'order_value' => 'double',
        'postage_charges' => 'double',
        'service_id' => 'uuid',
        'packages' => null,
        'order_extended_properties' => null,
        'service_config_items' => null,
        'postalcode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'OrderId',
        'authorization_token' => 'AuthorizationToken',
        'name' => 'Name',
        'company_name' => 'CompanyName',
        'address_line1' => 'AddressLine1',
        'address_line2' => 'AddressLine2',
        'address_line3' => 'AddressLine3',
        'town' => 'Town',
        'region' => 'Region',
        'country_code' => 'CountryCode',
        'delivery_note' => 'DeliveryNote',
        'email' => 'Email',
        'phone' => 'Phone',
        'order_reference' => 'OrderReference',
        'order_currency' => 'OrderCurrency',
        'order_value' => 'OrderValue',
        'postage_charges' => 'PostageCharges',
        'service_id' => 'ServiceId',
        'packages' => 'Packages',
        'order_extended_properties' => 'OrderExtendedProperties',
        'service_config_items' => 'ServiceConfigItems',
        'postalcode' => 'Postalcode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'authorization_token' => 'setAuthorizationToken',
        'name' => 'setName',
        'company_name' => 'setCompanyName',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'address_line3' => 'setAddressLine3',
        'town' => 'setTown',
        'region' => 'setRegion',
        'country_code' => 'setCountryCode',
        'delivery_note' => 'setDeliveryNote',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'order_reference' => 'setOrderReference',
        'order_currency' => 'setOrderCurrency',
        'order_value' => 'setOrderValue',
        'postage_charges' => 'setPostageCharges',
        'service_id' => 'setServiceId',
        'packages' => 'setPackages',
        'order_extended_properties' => 'setOrderExtendedProperties',
        'service_config_items' => 'setServiceConfigItems',
        'postalcode' => 'setPostalcode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'authorization_token' => 'getAuthorizationToken',
        'name' => 'getName',
        'company_name' => 'getCompanyName',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'address_line3' => 'getAddressLine3',
        'town' => 'getTown',
        'region' => 'getRegion',
        'country_code' => 'getCountryCode',
        'delivery_note' => 'getDeliveryNote',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'order_reference' => 'getOrderReference',
        'order_currency' => 'getOrderCurrency',
        'order_value' => 'getOrderValue',
        'postage_charges' => 'getPostageCharges',
        'service_id' => 'getServiceId',
        'packages' => 'getPackages',
        'order_extended_properties' => 'getOrderExtendedProperties',
        'service_config_items' => 'getServiceConfigItems',
        'postalcode' => 'getPostalcode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['authorization_token'] = isset($data['authorization_token']) ? $data['authorization_token'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['address_line3'] = isset($data['address_line3']) ? $data['address_line3'] : null;
        $this->container['town'] = isset($data['town']) ? $data['town'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['delivery_note'] = isset($data['delivery_note']) ? $data['delivery_note'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['order_reference'] = isset($data['order_reference']) ? $data['order_reference'] : null;
        $this->container['order_currency'] = isset($data['order_currency']) ? $data['order_currency'] : null;
        $this->container['order_value'] = isset($data['order_value']) ? $data['order_value'] : null;
        $this->container['postage_charges'] = isset($data['postage_charges']) ? $data['postage_charges'] : null;
        $this->container['service_id'] = isset($data['service_id']) ? $data['service_id'] : null;
        $this->container['packages'] = isset($data['packages']) ? $data['packages'] : null;
        $this->container['order_extended_properties'] = isset($data['order_extended_properties']) ? $data['order_extended_properties'] : null;
        $this->container['service_config_items'] = isset($data['service_config_items']) ? $data['service_config_items'] : null;
        $this->container['postalcode'] = isset($data['postalcode']) ? $data['postalcode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['authorization_token'] === null) {
            $invalidProperties[] = "'authorization_token' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets authorization_token
     *
     * @return string
     */
    public function getAuthorizationToken()
    {
        return $this->container['authorization_token'];
    }

    /**
     * Sets authorization_token
     *
     * @param string $authorization_token authorization_token
     *
     * @return $this
     */
    public function setAuthorizationToken($authorization_token)
    {
        $this->container['authorization_token'] = $authorization_token;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 address_line1
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string $address_line2 address_line2
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets address_line3
     *
     * @return string
     */
    public function getAddressLine3()
    {
        return $this->container['address_line3'];
    }

    /**
     * Sets address_line3
     *
     * @param string $address_line3 address_line3
     *
     * @return $this
     */
    public function setAddressLine3($address_line3)
    {
        $this->container['address_line3'] = $address_line3;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string $town town
     *
     * @return $this
     */
    public function setTown($town)
    {
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets delivery_note
     *
     * @return string
     */
    public function getDeliveryNote()
    {
        return $this->container['delivery_note'];
    }

    /**
     * Sets delivery_note
     *
     * @param string $delivery_note delivery_note
     *
     * @return $this
     */
    public function setDeliveryNote($delivery_note)
    {
        $this->container['delivery_note'] = $delivery_note;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets order_reference
     *
     * @return string
     */
    public function getOrderReference()
    {
        return $this->container['order_reference'];
    }

    /**
     * Sets order_reference
     *
     * @param string $order_reference order_reference
     *
     * @return $this
     */
    public function setOrderReference($order_reference)
    {
        $this->container['order_reference'] = $order_reference;

        return $this;
    }

    /**
     * Gets order_currency
     *
     * @return string
     */
    public function getOrderCurrency()
    {
        return $this->container['order_currency'];
    }

    /**
     * Sets order_currency
     *
     * @param string $order_currency order_currency
     *
     * @return $this
     */
    public function setOrderCurrency($order_currency)
    {
        $this->container['order_currency'] = $order_currency;

        return $this;
    }

    /**
     * Gets order_value
     *
     * @return double
     */
    public function getOrderValue()
    {
        return $this->container['order_value'];
    }

    /**
     * Sets order_value
     *
     * @param double $order_value order_value
     *
     * @return $this
     */
    public function setOrderValue($order_value)
    {
        $this->container['order_value'] = $order_value;

        return $this;
    }

    /**
     * Gets postage_charges
     *
     * @return double
     */
    public function getPostageCharges()
    {
        return $this->container['postage_charges'];
    }

    /**
     * Sets postage_charges
     *
     * @param double $postage_charges postage_charges
     *
     * @return $this
     */
    public function setPostageCharges($postage_charges)
    {
        $this->container['postage_charges'] = $postage_charges;

        return $this;
    }

    /**
     * Gets service_id
     *
     * @return string
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     *
     * @param string $service_id service_id
     *
     * @return $this
     */
    public function setServiceId($service_id)
    {
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return \Swagger\Client\Model\Package[]
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param \Swagger\Client\Model\Package[] $packages packages
     *
     * @return $this
     */
    public function setPackages($packages)
    {
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets order_extended_properties
     *
     * @return \Swagger\Client\Model\OrderExtendedProperty[]
     */
    public function getOrderExtendedProperties()
    {
        return $this->container['order_extended_properties'];
    }

    /**
     * Sets order_extended_properties
     *
     * @param \Swagger\Client\Model\OrderExtendedProperty[] $order_extended_properties order_extended_properties
     *
     * @return $this
     */
    public function setOrderExtendedProperties($order_extended_properties)
    {
        $this->container['order_extended_properties'] = $order_extended_properties;

        return $this;
    }

    /**
     * Gets service_config_items
     *
     * @return \Swagger\Client\Model\ServiceConfigItem[]
     */
    public function getServiceConfigItems()
    {
        return $this->container['service_config_items'];
    }

    /**
     * Sets service_config_items
     *
     * @param \Swagger\Client\Model\ServiceConfigItem[] $service_config_items service_config_items
     *
     * @return $this
     */
    public function setServiceConfigItems($service_config_items)
    {
        $this->container['service_config_items'] = $service_config_items;

        return $this;
    }

    /**
     * Gets postalcode
     *
     * @return string
     */
    public function getPostalcode()
    {
        return $this->container['postalcode'];
    }

    /**
     * Sets postalcode
     *
     * @param string $postalcode postalcode
     *
     * @return $this
     */
    public function setPostalcode($postalcode)
    {
        $this->container['postalcode'] = $postalcode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
