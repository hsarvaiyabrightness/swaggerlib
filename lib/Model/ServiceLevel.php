<?php
/**
 * ServiceLevel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ServiceLevel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceLevel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceLevel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'service_level_id' => 'int',
        'service_code' => 'string',
        'service_name' => 'string',
        'shipping_charge' => 'double',
        'duty' => 'double',
        'tax' => 'double',
        'insurance' => 'double',
        'total' => 'double',
        'subtotal' => 'double',
        'company_currency' => 'string',
        'shipping_charge_company_currency_value' => 'double',
        'duty_company_currency_value' => 'double',
        'tax_company_currency_value' => 'double',
        'insurance_company_currency_value' => 'double',
        'subtotal_company_currency_value' => 'double',
        'promo_discount' => 'double',
        'promo_discount_company_currency' => 'double',
        'handling' => 'double',
        'invalid_items' => '\Swagger\Client\Model\InvalidItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'service_level_id' => 'int32',
        'service_code' => null,
        'service_name' => null,
        'shipping_charge' => 'double',
        'duty' => 'double',
        'tax' => 'double',
        'insurance' => 'double',
        'total' => 'double',
        'subtotal' => 'double',
        'company_currency' => null,
        'shipping_charge_company_currency_value' => 'double',
        'duty_company_currency_value' => 'double',
        'tax_company_currency_value' => 'double',
        'insurance_company_currency_value' => 'double',
        'subtotal_company_currency_value' => 'double',
        'promo_discount' => 'double',
        'promo_discount_company_currency' => 'double',
        'handling' => 'double',
        'invalid_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'service_level_id' => 'serviceLevelId',
        'service_code' => 'serviceCode',
        'service_name' => 'serviceName',
        'shipping_charge' => 'shippingCharge',
        'duty' => 'duty',
        'tax' => 'tax',
        'insurance' => 'insurance',
        'total' => 'total',
        'subtotal' => 'subtotal',
        'company_currency' => 'companyCurrency',
        'shipping_charge_company_currency_value' => 'shippingChargeCompanyCurrencyValue',
        'duty_company_currency_value' => 'dutyCompanyCurrencyValue',
        'tax_company_currency_value' => 'taxCompanyCurrencyValue',
        'insurance_company_currency_value' => 'insuranceCompanyCurrencyValue',
        'subtotal_company_currency_value' => 'subtotalCompanyCurrencyValue',
        'promo_discount' => 'promoDiscount',
        'promo_discount_company_currency' => 'promoDiscountCompanyCurrency',
        'handling' => 'handling',
        'invalid_items' => 'invalidItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'service_level_id' => 'setServiceLevelId',
        'service_code' => 'setServiceCode',
        'service_name' => 'setServiceName',
        'shipping_charge' => 'setShippingCharge',
        'duty' => 'setDuty',
        'tax' => 'setTax',
        'insurance' => 'setInsurance',
        'total' => 'setTotal',
        'subtotal' => 'setSubtotal',
        'company_currency' => 'setCompanyCurrency',
        'shipping_charge_company_currency_value' => 'setShippingChargeCompanyCurrencyValue',
        'duty_company_currency_value' => 'setDutyCompanyCurrencyValue',
        'tax_company_currency_value' => 'setTaxCompanyCurrencyValue',
        'insurance_company_currency_value' => 'setInsuranceCompanyCurrencyValue',
        'subtotal_company_currency_value' => 'setSubtotalCompanyCurrencyValue',
        'promo_discount' => 'setPromoDiscount',
        'promo_discount_company_currency' => 'setPromoDiscountCompanyCurrency',
        'handling' => 'setHandling',
        'invalid_items' => 'setInvalidItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'service_level_id' => 'getServiceLevelId',
        'service_code' => 'getServiceCode',
        'service_name' => 'getServiceName',
        'shipping_charge' => 'getShippingCharge',
        'duty' => 'getDuty',
        'tax' => 'getTax',
        'insurance' => 'getInsurance',
        'total' => 'getTotal',
        'subtotal' => 'getSubtotal',
        'company_currency' => 'getCompanyCurrency',
        'shipping_charge_company_currency_value' => 'getShippingChargeCompanyCurrencyValue',
        'duty_company_currency_value' => 'getDutyCompanyCurrencyValue',
        'tax_company_currency_value' => 'getTaxCompanyCurrencyValue',
        'insurance_company_currency_value' => 'getInsuranceCompanyCurrencyValue',
        'subtotal_company_currency_value' => 'getSubtotalCompanyCurrencyValue',
        'promo_discount' => 'getPromoDiscount',
        'promo_discount_company_currency' => 'getPromoDiscountCompanyCurrency',
        'handling' => 'getHandling',
        'invalid_items' => 'getInvalidItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['service_level_id'] = isset($data['service_level_id']) ? $data['service_level_id'] : null;
        $this->container['service_code'] = isset($data['service_code']) ? $data['service_code'] : null;
        $this->container['service_name'] = isset($data['service_name']) ? $data['service_name'] : null;
        $this->container['shipping_charge'] = isset($data['shipping_charge']) ? $data['shipping_charge'] : null;
        $this->container['duty'] = isset($data['duty']) ? $data['duty'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['insurance'] = isset($data['insurance']) ? $data['insurance'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['company_currency'] = isset($data['company_currency']) ? $data['company_currency'] : null;
        $this->container['shipping_charge_company_currency_value'] = isset($data['shipping_charge_company_currency_value']) ? $data['shipping_charge_company_currency_value'] : null;
        $this->container['duty_company_currency_value'] = isset($data['duty_company_currency_value']) ? $data['duty_company_currency_value'] : null;
        $this->container['tax_company_currency_value'] = isset($data['tax_company_currency_value']) ? $data['tax_company_currency_value'] : null;
        $this->container['insurance_company_currency_value'] = isset($data['insurance_company_currency_value']) ? $data['insurance_company_currency_value'] : null;
        $this->container['subtotal_company_currency_value'] = isset($data['subtotal_company_currency_value']) ? $data['subtotal_company_currency_value'] : null;
        $this->container['promo_discount'] = isset($data['promo_discount']) ? $data['promo_discount'] : null;
        $this->container['promo_discount_company_currency'] = isset($data['promo_discount_company_currency']) ? $data['promo_discount_company_currency'] : null;
        $this->container['handling'] = isset($data['handling']) ? $data['handling'] : null;
        $this->container['invalid_items'] = isset($data['invalid_items']) ? $data['invalid_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets service_level_id
     *
     * @return int
     */
    public function getServiceLevelId()
    {
        return $this->container['service_level_id'];
    }

    /**
     * Sets service_level_id
     *
     * @param int $service_level_id service_level_id
     *
     * @return $this
     */
    public function setServiceLevelId($service_level_id)
    {
        $this->container['service_level_id'] = $service_level_id;

        return $this;
    }

    /**
     * Gets service_code
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param string $service_code service_code
     *
     * @return $this
     */
    public function setServiceCode($service_code)
    {
        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string $service_name service_name
     *
     * @return $this
     */
    public function setServiceName($service_name)
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets shipping_charge
     *
     * @return double
     */
    public function getShippingCharge()
    {
        return $this->container['shipping_charge'];
    }

    /**
     * Sets shipping_charge
     *
     * @param double $shipping_charge shipping_charge
     *
     * @return $this
     */
    public function setShippingCharge($shipping_charge)
    {
        $this->container['shipping_charge'] = $shipping_charge;

        return $this;
    }

    /**
     * Gets duty
     *
     * @return double
     */
    public function getDuty()
    {
        return $this->container['duty'];
    }

    /**
     * Sets duty
     *
     * @param double $duty duty
     *
     * @return $this
     */
    public function setDuty($duty)
    {
        $this->container['duty'] = $duty;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param double $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets insurance
     *
     * @return double
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     *
     * @param double $insurance insurance
     *
     * @return $this
     */
    public function setInsurance($insurance)
    {
        $this->container['insurance'] = $insurance;

        return $this;
    }

    /**
     * Gets total
     *
     * @return double
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param double $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return double
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param double $subtotal subtotal
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets company_currency
     *
     * @return string
     */
    public function getCompanyCurrency()
    {
        return $this->container['company_currency'];
    }

    /**
     * Sets company_currency
     *
     * @param string $company_currency company_currency
     *
     * @return $this
     */
    public function setCompanyCurrency($company_currency)
    {
        $this->container['company_currency'] = $company_currency;

        return $this;
    }

    /**
     * Gets shipping_charge_company_currency_value
     *
     * @return double
     */
    public function getShippingChargeCompanyCurrencyValue()
    {
        return $this->container['shipping_charge_company_currency_value'];
    }

    /**
     * Sets shipping_charge_company_currency_value
     *
     * @param double $shipping_charge_company_currency_value shipping_charge_company_currency_value
     *
     * @return $this
     */
    public function setShippingChargeCompanyCurrencyValue($shipping_charge_company_currency_value)
    {
        $this->container['shipping_charge_company_currency_value'] = $shipping_charge_company_currency_value;

        return $this;
    }

    /**
     * Gets duty_company_currency_value
     *
     * @return double
     */
    public function getDutyCompanyCurrencyValue()
    {
        return $this->container['duty_company_currency_value'];
    }

    /**
     * Sets duty_company_currency_value
     *
     * @param double $duty_company_currency_value duty_company_currency_value
     *
     * @return $this
     */
    public function setDutyCompanyCurrencyValue($duty_company_currency_value)
    {
        $this->container['duty_company_currency_value'] = $duty_company_currency_value;

        return $this;
    }

    /**
     * Gets tax_company_currency_value
     *
     * @return double
     */
    public function getTaxCompanyCurrencyValue()
    {
        return $this->container['tax_company_currency_value'];
    }

    /**
     * Sets tax_company_currency_value
     *
     * @param double $tax_company_currency_value tax_company_currency_value
     *
     * @return $this
     */
    public function setTaxCompanyCurrencyValue($tax_company_currency_value)
    {
        $this->container['tax_company_currency_value'] = $tax_company_currency_value;

        return $this;
    }

    /**
     * Gets insurance_company_currency_value
     *
     * @return double
     */
    public function getInsuranceCompanyCurrencyValue()
    {
        return $this->container['insurance_company_currency_value'];
    }

    /**
     * Sets insurance_company_currency_value
     *
     * @param double $insurance_company_currency_value insurance_company_currency_value
     *
     * @return $this
     */
    public function setInsuranceCompanyCurrencyValue($insurance_company_currency_value)
    {
        $this->container['insurance_company_currency_value'] = $insurance_company_currency_value;

        return $this;
    }

    /**
     * Gets subtotal_company_currency_value
     *
     * @return double
     */
    public function getSubtotalCompanyCurrencyValue()
    {
        return $this->container['subtotal_company_currency_value'];
    }

    /**
     * Sets subtotal_company_currency_value
     *
     * @param double $subtotal_company_currency_value subtotal_company_currency_value
     *
     * @return $this
     */
    public function setSubtotalCompanyCurrencyValue($subtotal_company_currency_value)
    {
        $this->container['subtotal_company_currency_value'] = $subtotal_company_currency_value;

        return $this;
    }

    /**
     * Gets promo_discount
     *
     * @return double
     */
    public function getPromoDiscount()
    {
        return $this->container['promo_discount'];
    }

    /**
     * Sets promo_discount
     *
     * @param double $promo_discount promo_discount
     *
     * @return $this
     */
    public function setPromoDiscount($promo_discount)
    {
        $this->container['promo_discount'] = $promo_discount;

        return $this;
    }

    /**
     * Gets promo_discount_company_currency
     *
     * @return double
     */
    public function getPromoDiscountCompanyCurrency()
    {
        return $this->container['promo_discount_company_currency'];
    }

    /**
     * Sets promo_discount_company_currency
     *
     * @param double $promo_discount_company_currency promo_discount_company_currency
     *
     * @return $this
     */
    public function setPromoDiscountCompanyCurrency($promo_discount_company_currency)
    {
        $this->container['promo_discount_company_currency'] = $promo_discount_company_currency;

        return $this;
    }

    /**
     * Gets handling
     *
     * @return double
     */
    public function getHandling()
    {
        return $this->container['handling'];
    }

    /**
     * Sets handling
     *
     * @param double $handling handling
     *
     * @return $this
     */
    public function setHandling($handling)
    {
        $this->container['handling'] = $handling;

        return $this;
    }

    /**
     * Gets invalid_items
     *
     * @return \Swagger\Client\Model\InvalidItem[]
     */
    public function getInvalidItems()
    {
        return $this->container['invalid_items'];
    }

    /**
     * Sets invalid_items
     *
     * @param \Swagger\Client\Model\InvalidItem[] $invalid_items invalid_items
     *
     * @return $this
     */
    public function setInvalidItems($invalid_items)
    {
        $this->container['invalid_items'] = $invalid_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
