<?php
/**
 * GetShippingRateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetShippingRateRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetShippingRateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetShippingRateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipper_reference' => 'string',
        'transaction_id' => 'string',
        'transaction_src' => 'string',
        'shipper' => '\Swagger\Client\Model\Shipper',
        'send_from' => '\Swagger\Client\Model\SendFrom',
        'send_to' => '\Swagger\Client\Model\SendTo',
        'shipment_charge_type' => 'string',
        'service_code' => 'string',
        'service_description' => 'string',
        'num_of_pieces' => 'string',
        'weight' => 'string',
        'weight_unit' => 'string',
        'length' => 'string',
        'width' => 'string',
        'height' => 'string',
        'dim_unit' => 'string',
        'currency' => 'string',
        'label_type' => 'string',
        'label_format' => 'string',
        'customs_info' => '\Swagger\Client\Model\CustomsInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipper_reference' => null,
        'transaction_id' => null,
        'transaction_src' => null,
        'shipper' => null,
        'send_from' => null,
        'send_to' => null,
        'shipment_charge_type' => null,
        'service_code' => null,
        'service_description' => null,
        'num_of_pieces' => null,
        'weight' => null,
        'weight_unit' => null,
        'length' => null,
        'width' => null,
        'height' => null,
        'dim_unit' => null,
        'currency' => null,
        'label_type' => null,
        'label_format' => null,
        'customs_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipper_reference' => 'shipperReference',
        'transaction_id' => 'transactionId',
        'transaction_src' => 'transactionSrc',
        'shipper' => 'shipper',
        'send_from' => 'sendFrom',
        'send_to' => 'sendTo',
        'shipment_charge_type' => 'shipmentChargeType',
        'service_code' => 'serviceCode',
        'service_description' => 'serviceDescription',
        'num_of_pieces' => 'numOfPieces',
        'weight' => 'weight',
        'weight_unit' => 'weightUnit',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'dim_unit' => 'dimUnit',
        'currency' => 'currency',
        'label_type' => 'labelType',
        'label_format' => 'labelFormat',
        'customs_info' => 'customsInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipper_reference' => 'setShipperReference',
        'transaction_id' => 'setTransactionId',
        'transaction_src' => 'setTransactionSrc',
        'shipper' => 'setShipper',
        'send_from' => 'setSendFrom',
        'send_to' => 'setSendTo',
        'shipment_charge_type' => 'setShipmentChargeType',
        'service_code' => 'setServiceCode',
        'service_description' => 'setServiceDescription',
        'num_of_pieces' => 'setNumOfPieces',
        'weight' => 'setWeight',
        'weight_unit' => 'setWeightUnit',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'dim_unit' => 'setDimUnit',
        'currency' => 'setCurrency',
        'label_type' => 'setLabelType',
        'label_format' => 'setLabelFormat',
        'customs_info' => 'setCustomsInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipper_reference' => 'getShipperReference',
        'transaction_id' => 'getTransactionId',
        'transaction_src' => 'getTransactionSrc',
        'shipper' => 'getShipper',
        'send_from' => 'getSendFrom',
        'send_to' => 'getSendTo',
        'shipment_charge_type' => 'getShipmentChargeType',
        'service_code' => 'getServiceCode',
        'service_description' => 'getServiceDescription',
        'num_of_pieces' => 'getNumOfPieces',
        'weight' => 'getWeight',
        'weight_unit' => 'getWeightUnit',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'dim_unit' => 'getDimUnit',
        'currency' => 'getCurrency',
        'label_type' => 'getLabelType',
        'label_format' => 'getLabelFormat',
        'customs_info' => 'getCustomsInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LABEL_TYPE_FORWARD = 'FORWARD';
    const LABEL_TYPE__RETURN = 'RETURN';
    const LABEL_TYPE_FORWARD_RETURN = 'FORWARD_RETURN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelTypeAllowableValues()
    {
        return [
            self::LABEL_TYPE_FORWARD,
            self::LABEL_TYPE__RETURN,
            self::LABEL_TYPE_FORWARD_RETURN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipper_reference'] = isset($data['shipper_reference']) ? $data['shipper_reference'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['transaction_src'] = isset($data['transaction_src']) ? $data['transaction_src'] : null;
        $this->container['shipper'] = isset($data['shipper']) ? $data['shipper'] : null;
        $this->container['send_from'] = isset($data['send_from']) ? $data['send_from'] : null;
        $this->container['send_to'] = isset($data['send_to']) ? $data['send_to'] : null;
        $this->container['shipment_charge_type'] = isset($data['shipment_charge_type']) ? $data['shipment_charge_type'] : null;
        $this->container['service_code'] = isset($data['service_code']) ? $data['service_code'] : null;
        $this->container['service_description'] = isset($data['service_description']) ? $data['service_description'] : null;
        $this->container['num_of_pieces'] = isset($data['num_of_pieces']) ? $data['num_of_pieces'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['weight_unit'] = isset($data['weight_unit']) ? $data['weight_unit'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['dim_unit'] = isset($data['dim_unit']) ? $data['dim_unit'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['label_type'] = isset($data['label_type']) ? $data['label_type'] : null;
        $this->container['label_format'] = isset($data['label_format']) ? $data['label_format'] : null;
        $this->container['customs_info'] = isset($data['customs_info']) ? $data['customs_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLabelTypeAllowableValues();
        if (!is_null($this->container['label_type']) && !in_array($this->container['label_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'label_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipper_reference
     *
     * @return string
     */
    public function getShipperReference()
    {
        return $this->container['shipper_reference'];
    }

    /**
     * Sets shipper_reference
     *
     * @param string $shipper_reference shipper_reference
     *
     * @return $this
     */
    public function setShipperReference($shipper_reference)
    {
        $this->container['shipper_reference'] = $shipper_reference;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id transaction_id
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets transaction_src
     *
     * @return string
     */
    public function getTransactionSrc()
    {
        return $this->container['transaction_src'];
    }

    /**
     * Sets transaction_src
     *
     * @param string $transaction_src transaction_src
     *
     * @return $this
     */
    public function setTransactionSrc($transaction_src)
    {
        $this->container['transaction_src'] = $transaction_src;

        return $this;
    }

    /**
     * Gets shipper
     *
     * @return \Swagger\Client\Model\Shipper
     */
    public function getShipper()
    {
        return $this->container['shipper'];
    }

    /**
     * Sets shipper
     *
     * @param \Swagger\Client\Model\Shipper $shipper shipper
     *
     * @return $this
     */
    public function setShipper($shipper)
    {
        $this->container['shipper'] = $shipper;

        return $this;
    }

    /**
     * Gets send_from
     *
     * @return \Swagger\Client\Model\SendFrom
     */
    public function getSendFrom()
    {
        return $this->container['send_from'];
    }

    /**
     * Sets send_from
     *
     * @param \Swagger\Client\Model\SendFrom $send_from send_from
     *
     * @return $this
     */
    public function setSendFrom($send_from)
    {
        $this->container['send_from'] = $send_from;

        return $this;
    }

    /**
     * Gets send_to
     *
     * @return \Swagger\Client\Model\SendTo
     */
    public function getSendTo()
    {
        return $this->container['send_to'];
    }

    /**
     * Sets send_to
     *
     * @param \Swagger\Client\Model\SendTo $send_to send_to
     *
     * @return $this
     */
    public function setSendTo($send_to)
    {
        $this->container['send_to'] = $send_to;

        return $this;
    }

    /**
     * Gets shipment_charge_type
     *
     * @return string
     */
    public function getShipmentChargeType()
    {
        return $this->container['shipment_charge_type'];
    }

    /**
     * Sets shipment_charge_type
     *
     * @param string $shipment_charge_type shipment_charge_type
     *
     * @return $this
     */
    public function setShipmentChargeType($shipment_charge_type)
    {
        $this->container['shipment_charge_type'] = $shipment_charge_type;

        return $this;
    }

    /**
     * Gets service_code
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param string $service_code service_code
     *
     * @return $this
     */
    public function setServiceCode($service_code)
    {
        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets service_description
     *
     * @return string
     */
    public function getServiceDescription()
    {
        return $this->container['service_description'];
    }

    /**
     * Sets service_description
     *
     * @param string $service_description service_description
     *
     * @return $this
     */
    public function setServiceDescription($service_description)
    {
        $this->container['service_description'] = $service_description;

        return $this;
    }

    /**
     * Gets num_of_pieces
     *
     * @return string
     */
    public function getNumOfPieces()
    {
        return $this->container['num_of_pieces'];
    }

    /**
     * Sets num_of_pieces
     *
     * @param string $num_of_pieces num_of_pieces
     *
     * @return $this
     */
    public function setNumOfPieces($num_of_pieces)
    {
        $this->container['num_of_pieces'] = $num_of_pieces;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string $weight_unit weight_unit
     *
     * @return $this
     */
    public function setWeightUnit($weight_unit)
    {
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets length
     *
     * @return string
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param string $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets dim_unit
     *
     * @return string
     */
    public function getDimUnit()
    {
        return $this->container['dim_unit'];
    }

    /**
     * Sets dim_unit
     *
     * @param string $dim_unit dim_unit
     *
     * @return $this
     */
    public function setDimUnit($dim_unit)
    {
        $this->container['dim_unit'] = $dim_unit;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets label_type
     *
     * @return string
     */
    public function getLabelType()
    {
        return $this->container['label_type'];
    }

    /**
     * Sets label_type
     *
     * @param string $label_type label_type
     *
     * @return $this
     */
    public function setLabelType($label_type)
    {
        $allowedValues = $this->getLabelTypeAllowableValues();
        if (!is_null($label_type) && !in_array($label_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'label_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label_type'] = $label_type;

        return $this;
    }

    /**
     * Gets label_format
     *
     * @return string
     */
    public function getLabelFormat()
    {
        return $this->container['label_format'];
    }

    /**
     * Sets label_format
     *
     * @param string $label_format label_format
     *
     * @return $this
     */
    public function setLabelFormat($label_format)
    {
        $this->container['label_format'] = $label_format;

        return $this;
    }

    /**
     * Gets customs_info
     *
     * @return \Swagger\Client\Model\CustomsInfo
     */
    public function getCustomsInfo()
    {
        return $this->container['customs_info'];
    }

    /**
     * Sets customs_info
     *
     * @param \Swagger\Client\Model\CustomsInfo $customs_info customs_info
     *
     * @return $this
     */
    public function setCustomsInfo($customs_info)
    {
        $this->container['customs_info'] = $customs_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
