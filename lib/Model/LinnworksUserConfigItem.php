<?php
/**
 * LinnworksUserConfigItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LinnworksUserConfigItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LinnworksUserConfigItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LinnworksUserConfigItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'list_values' => '\Swagger\Client\Model\ListValue[]',
        'value_type' => 'int',
        'config_item_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'group_name' => 'string',
        'sort_order' => 'int',
        'selected_value' => 'string',
        'reg_ex_validation' => 'string',
        'reg_ex_error' => 'string',
        'must_be_specified' => 'bool',
        'read_only' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'list_values' => null,
        'value_type' => 'int32',
        'config_item_id' => null,
        'name' => null,
        'description' => null,
        'group_name' => null,
        'sort_order' => 'int32',
        'selected_value' => null,
        'reg_ex_validation' => null,
        'reg_ex_error' => null,
        'must_be_specified' => null,
        'read_only' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'list_values' => 'ListValues',
        'value_type' => 'ValueType',
        'config_item_id' => 'ConfigItemId',
        'name' => 'Name',
        'description' => 'Description',
        'group_name' => 'GroupName',
        'sort_order' => 'SortOrder',
        'selected_value' => 'SelectedValue',
        'reg_ex_validation' => 'RegExValidation',
        'reg_ex_error' => 'RegExError',
        'must_be_specified' => 'MustBeSpecified',
        'read_only' => 'ReadOnly'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'list_values' => 'setListValues',
        'value_type' => 'setValueType',
        'config_item_id' => 'setConfigItemId',
        'name' => 'setName',
        'description' => 'setDescription',
        'group_name' => 'setGroupName',
        'sort_order' => 'setSortOrder',
        'selected_value' => 'setSelectedValue',
        'reg_ex_validation' => 'setRegExValidation',
        'reg_ex_error' => 'setRegExError',
        'must_be_specified' => 'setMustBeSpecified',
        'read_only' => 'setReadOnly'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'list_values' => 'getListValues',
        'value_type' => 'getValueType',
        'config_item_id' => 'getConfigItemId',
        'name' => 'getName',
        'description' => 'getDescription',
        'group_name' => 'getGroupName',
        'sort_order' => 'getSortOrder',
        'selected_value' => 'getSelectedValue',
        'reg_ex_validation' => 'getRegExValidation',
        'reg_ex_error' => 'getRegExError',
        'must_be_specified' => 'getMustBeSpecified',
        'read_only' => 'getReadOnly'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['list_values'] = isset($data['list_values']) ? $data['list_values'] : null;
        $this->container['value_type'] = isset($data['value_type']) ? $data['value_type'] : null;
        $this->container['config_item_id'] = isset($data['config_item_id']) ? $data['config_item_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['selected_value'] = isset($data['selected_value']) ? $data['selected_value'] : null;
        $this->container['reg_ex_validation'] = isset($data['reg_ex_validation']) ? $data['reg_ex_validation'] : null;
        $this->container['reg_ex_error'] = isset($data['reg_ex_error']) ? $data['reg_ex_error'] : null;
        $this->container['must_be_specified'] = isset($data['must_be_specified']) ? $data['must_be_specified'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets list_values
     *
     * @return \Swagger\Client\Model\ListValue[]
     */
    public function getListValues()
    {
        return $this->container['list_values'];
    }

    /**
     * Sets list_values
     *
     * @param \Swagger\Client\Model\ListValue[] $list_values list_values
     *
     * @return $this
     */
    public function setListValues($list_values)
    {
        $this->container['list_values'] = $list_values;

        return $this;
    }

    /**
     * Gets value_type
     *
     * @return int
     */
    public function getValueType()
    {
        return $this->container['value_type'];
    }

    /**
     * Sets value_type
     *
     * @param int $value_type value_type
     *
     * @return $this
     */
    public function setValueType($value_type)
    {
        $this->container['value_type'] = $value_type;

        return $this;
    }

    /**
     * Gets config_item_id
     *
     * @return string
     */
    public function getConfigItemId()
    {
        return $this->container['config_item_id'];
    }

    /**
     * Sets config_item_id
     *
     * @param string $config_item_id config_item_id
     *
     * @return $this
     */
    public function setConfigItemId($config_item_id)
    {
        $this->container['config_item_id'] = $config_item_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string $group_name group_name
     *
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int $sort_order sort_order
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets selected_value
     *
     * @return string
     */
    public function getSelectedValue()
    {
        return $this->container['selected_value'];
    }

    /**
     * Sets selected_value
     *
     * @param string $selected_value selected_value
     *
     * @return $this
     */
    public function setSelectedValue($selected_value)
    {
        $this->container['selected_value'] = $selected_value;

        return $this;
    }

    /**
     * Gets reg_ex_validation
     *
     * @return string
     */
    public function getRegExValidation()
    {
        return $this->container['reg_ex_validation'];
    }

    /**
     * Sets reg_ex_validation
     *
     * @param string $reg_ex_validation reg_ex_validation
     *
     * @return $this
     */
    public function setRegExValidation($reg_ex_validation)
    {
        $this->container['reg_ex_validation'] = $reg_ex_validation;

        return $this;
    }

    /**
     * Gets reg_ex_error
     *
     * @return string
     */
    public function getRegExError()
    {
        return $this->container['reg_ex_error'];
    }

    /**
     * Sets reg_ex_error
     *
     * @param string $reg_ex_error reg_ex_error
     *
     * @return $this
     */
    public function setRegExError($reg_ex_error)
    {
        $this->container['reg_ex_error'] = $reg_ex_error;

        return $this;
    }

    /**
     * Gets must_be_specified
     *
     * @return bool
     */
    public function getMustBeSpecified()
    {
        return $this->container['must_be_specified'];
    }

    /**
     * Sets must_be_specified
     *
     * @param bool $must_be_specified must_be_specified
     *
     * @return $this
     */
    public function setMustBeSpecified($must_be_specified)
    {
        $this->container['must_be_specified'] = $must_be_specified;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool $read_only read_only
     *
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
