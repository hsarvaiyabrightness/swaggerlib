<?php
/**
 * CustomsInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CustomsInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomsInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomsInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customs_certify' => 'string',
        'customs_signer' => 'string',
        'contents_type' => 'string',
        'contents_explanation' => 'string',
        'restriction_type' => 'string',
        'restriction_comments' => 'string',
        'eel_pfc' => 'string',
        'customs_items' => '\Swagger\Client\Model\CustomsItem[]',
        'declaration' => 'string',
        'non_delivery_option' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customs_certify' => null,
        'customs_signer' => null,
        'contents_type' => null,
        'contents_explanation' => null,
        'restriction_type' => null,
        'restriction_comments' => null,
        'eel_pfc' => null,
        'customs_items' => null,
        'declaration' => null,
        'non_delivery_option' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customs_certify' => 'customsCertify',
        'customs_signer' => 'customsSigner',
        'contents_type' => 'contentsType',
        'contents_explanation' => 'contentsExplanation',
        'restriction_type' => 'restrictionType',
        'restriction_comments' => 'restrictionComments',
        'eel_pfc' => 'eelPfc',
        'customs_items' => 'customsItems',
        'declaration' => 'declaration',
        'non_delivery_option' => 'nonDeliveryOption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customs_certify' => 'setCustomsCertify',
        'customs_signer' => 'setCustomsSigner',
        'contents_type' => 'setContentsType',
        'contents_explanation' => 'setContentsExplanation',
        'restriction_type' => 'setRestrictionType',
        'restriction_comments' => 'setRestrictionComments',
        'eel_pfc' => 'setEelPfc',
        'customs_items' => 'setCustomsItems',
        'declaration' => 'setDeclaration',
        'non_delivery_option' => 'setNonDeliveryOption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customs_certify' => 'getCustomsCertify',
        'customs_signer' => 'getCustomsSigner',
        'contents_type' => 'getContentsType',
        'contents_explanation' => 'getContentsExplanation',
        'restriction_type' => 'getRestrictionType',
        'restriction_comments' => 'getRestrictionComments',
        'eel_pfc' => 'getEelPfc',
        'customs_items' => 'getCustomsItems',
        'declaration' => 'getDeclaration',
        'non_delivery_option' => 'getNonDeliveryOption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customs_certify'] = isset($data['customs_certify']) ? $data['customs_certify'] : null;
        $this->container['customs_signer'] = isset($data['customs_signer']) ? $data['customs_signer'] : null;
        $this->container['contents_type'] = isset($data['contents_type']) ? $data['contents_type'] : null;
        $this->container['contents_explanation'] = isset($data['contents_explanation']) ? $data['contents_explanation'] : null;
        $this->container['restriction_type'] = isset($data['restriction_type']) ? $data['restriction_type'] : null;
        $this->container['restriction_comments'] = isset($data['restriction_comments']) ? $data['restriction_comments'] : null;
        $this->container['eel_pfc'] = isset($data['eel_pfc']) ? $data['eel_pfc'] : null;
        $this->container['customs_items'] = isset($data['customs_items']) ? $data['customs_items'] : null;
        $this->container['declaration'] = isset($data['declaration']) ? $data['declaration'] : null;
        $this->container['non_delivery_option'] = isset($data['non_delivery_option']) ? $data['non_delivery_option'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customs_certify
     *
     * @return string
     */
    public function getCustomsCertify()
    {
        return $this->container['customs_certify'];
    }

    /**
     * Sets customs_certify
     *
     * @param string $customs_certify customs_certify
     *
     * @return $this
     */
    public function setCustomsCertify($customs_certify)
    {
        $this->container['customs_certify'] = $customs_certify;

        return $this;
    }

    /**
     * Gets customs_signer
     *
     * @return string
     */
    public function getCustomsSigner()
    {
        return $this->container['customs_signer'];
    }

    /**
     * Sets customs_signer
     *
     * @param string $customs_signer customs_signer
     *
     * @return $this
     */
    public function setCustomsSigner($customs_signer)
    {
        $this->container['customs_signer'] = $customs_signer;

        return $this;
    }

    /**
     * Gets contents_type
     *
     * @return string
     */
    public function getContentsType()
    {
        return $this->container['contents_type'];
    }

    /**
     * Sets contents_type
     *
     * @param string $contents_type contents_type
     *
     * @return $this
     */
    public function setContentsType($contents_type)
    {
        $this->container['contents_type'] = $contents_type;

        return $this;
    }

    /**
     * Gets contents_explanation
     *
     * @return string
     */
    public function getContentsExplanation()
    {
        return $this->container['contents_explanation'];
    }

    /**
     * Sets contents_explanation
     *
     * @param string $contents_explanation contents_explanation
     *
     * @return $this
     */
    public function setContentsExplanation($contents_explanation)
    {
        $this->container['contents_explanation'] = $contents_explanation;

        return $this;
    }

    /**
     * Gets restriction_type
     *
     * @return string
     */
    public function getRestrictionType()
    {
        return $this->container['restriction_type'];
    }

    /**
     * Sets restriction_type
     *
     * @param string $restriction_type restriction_type
     *
     * @return $this
     */
    public function setRestrictionType($restriction_type)
    {
        $this->container['restriction_type'] = $restriction_type;

        return $this;
    }

    /**
     * Gets restriction_comments
     *
     * @return string
     */
    public function getRestrictionComments()
    {
        return $this->container['restriction_comments'];
    }

    /**
     * Sets restriction_comments
     *
     * @param string $restriction_comments restriction_comments
     *
     * @return $this
     */
    public function setRestrictionComments($restriction_comments)
    {
        $this->container['restriction_comments'] = $restriction_comments;

        return $this;
    }

    /**
     * Gets eel_pfc
     *
     * @return string
     */
    public function getEelPfc()
    {
        return $this->container['eel_pfc'];
    }

    /**
     * Sets eel_pfc
     *
     * @param string $eel_pfc eel_pfc
     *
     * @return $this
     */
    public function setEelPfc($eel_pfc)
    {
        $this->container['eel_pfc'] = $eel_pfc;

        return $this;
    }

    /**
     * Gets customs_items
     *
     * @return \Swagger\Client\Model\CustomsItem[]
     */
    public function getCustomsItems()
    {
        return $this->container['customs_items'];
    }

    /**
     * Sets customs_items
     *
     * @param \Swagger\Client\Model\CustomsItem[] $customs_items customs_items
     *
     * @return $this
     */
    public function setCustomsItems($customs_items)
    {
        $this->container['customs_items'] = $customs_items;

        return $this;
    }

    /**
     * Gets declaration
     *
     * @return string
     */
    public function getDeclaration()
    {
        return $this->container['declaration'];
    }

    /**
     * Sets declaration
     *
     * @param string $declaration declaration
     *
     * @return $this
     */
    public function setDeclaration($declaration)
    {
        $this->container['declaration'] = $declaration;

        return $this;
    }

    /**
     * Gets non_delivery_option
     *
     * @return string
     */
    public function getNonDeliveryOption()
    {
        return $this->container['non_delivery_option'];
    }

    /**
     * Sets non_delivery_option
     *
     * @param string $non_delivery_option non_delivery_option
     *
     * @return $this
     */
    public function setNonDeliveryOption($non_delivery_option)
    {
        $this->container['non_delivery_option'] = $non_delivery_option;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
