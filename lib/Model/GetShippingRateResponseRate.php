<?php
/**
 * GetShippingRateResponseRate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetShippingRateResponseRate Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetShippingRateResponseRate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetShippingRateResponse.Rate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rate_id' => 'string',
        'service_code' => 'string',
        'service_description' => 'string',
        'rate_chart' => 'string',
        'billable_weight_calculation_method' => 'string',
        'rating_method' => 'string',
        'weight' => 'string',
        'weight_unit' => 'string',
        'length' => 'string',
        'width' => 'string',
        'height' => 'string',
        'dim_unit' => 'string',
        'currency' => 'string',
        'transportation_charge' => 'string',
        'service_charge' => 'string',
        'service_options_charge' => 'string',
        'tax_type' => 'string',
        'tax_charge' => 'string',
        'total_charge' => 'string',
        'total_charge_with_tax' => 'string',
        'ship_discount' => 'string',
        'delivery_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rate_id' => null,
        'service_code' => null,
        'service_description' => null,
        'rate_chart' => null,
        'billable_weight_calculation_method' => null,
        'rating_method' => null,
        'weight' => null,
        'weight_unit' => null,
        'length' => null,
        'width' => null,
        'height' => null,
        'dim_unit' => null,
        'currency' => null,
        'transportation_charge' => null,
        'service_charge' => null,
        'service_options_charge' => null,
        'tax_type' => null,
        'tax_charge' => null,
        'total_charge' => null,
        'total_charge_with_tax' => null,
        'ship_discount' => null,
        'delivery_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rate_id' => 'rateId',
        'service_code' => 'serviceCode',
        'service_description' => 'serviceDescription',
        'rate_chart' => 'rateChart',
        'billable_weight_calculation_method' => 'billableWeightCalculationMethod',
        'rating_method' => 'ratingMethod',
        'weight' => 'weight',
        'weight_unit' => 'weightUnit',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'dim_unit' => 'dimUnit',
        'currency' => 'currency',
        'transportation_charge' => 'transportationCharge',
        'service_charge' => 'serviceCharge',
        'service_options_charge' => 'serviceOptionsCharge',
        'tax_type' => 'taxType',
        'tax_charge' => 'taxCharge',
        'total_charge' => 'totalCharge',
        'total_charge_with_tax' => 'totalChargeWithTax',
        'ship_discount' => 'shipDiscount',
        'delivery_date' => 'deliveryDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rate_id' => 'setRateId',
        'service_code' => 'setServiceCode',
        'service_description' => 'setServiceDescription',
        'rate_chart' => 'setRateChart',
        'billable_weight_calculation_method' => 'setBillableWeightCalculationMethod',
        'rating_method' => 'setRatingMethod',
        'weight' => 'setWeight',
        'weight_unit' => 'setWeightUnit',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'dim_unit' => 'setDimUnit',
        'currency' => 'setCurrency',
        'transportation_charge' => 'setTransportationCharge',
        'service_charge' => 'setServiceCharge',
        'service_options_charge' => 'setServiceOptionsCharge',
        'tax_type' => 'setTaxType',
        'tax_charge' => 'setTaxCharge',
        'total_charge' => 'setTotalCharge',
        'total_charge_with_tax' => 'setTotalChargeWithTax',
        'ship_discount' => 'setShipDiscount',
        'delivery_date' => 'setDeliveryDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rate_id' => 'getRateId',
        'service_code' => 'getServiceCode',
        'service_description' => 'getServiceDescription',
        'rate_chart' => 'getRateChart',
        'billable_weight_calculation_method' => 'getBillableWeightCalculationMethod',
        'rating_method' => 'getRatingMethod',
        'weight' => 'getWeight',
        'weight_unit' => 'getWeightUnit',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'dim_unit' => 'getDimUnit',
        'currency' => 'getCurrency',
        'transportation_charge' => 'getTransportationCharge',
        'service_charge' => 'getServiceCharge',
        'service_options_charge' => 'getServiceOptionsCharge',
        'tax_type' => 'getTaxType',
        'tax_charge' => 'getTaxCharge',
        'total_charge' => 'getTotalCharge',
        'total_charge_with_tax' => 'getTotalChargeWithTax',
        'ship_discount' => 'getShipDiscount',
        'delivery_date' => 'getDeliveryDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rate_id'] = isset($data['rate_id']) ? $data['rate_id'] : null;
        $this->container['service_code'] = isset($data['service_code']) ? $data['service_code'] : null;
        $this->container['service_description'] = isset($data['service_description']) ? $data['service_description'] : null;
        $this->container['rate_chart'] = isset($data['rate_chart']) ? $data['rate_chart'] : null;
        $this->container['billable_weight_calculation_method'] = isset($data['billable_weight_calculation_method']) ? $data['billable_weight_calculation_method'] : null;
        $this->container['rating_method'] = isset($data['rating_method']) ? $data['rating_method'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['weight_unit'] = isset($data['weight_unit']) ? $data['weight_unit'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['dim_unit'] = isset($data['dim_unit']) ? $data['dim_unit'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['transportation_charge'] = isset($data['transportation_charge']) ? $data['transportation_charge'] : null;
        $this->container['service_charge'] = isset($data['service_charge']) ? $data['service_charge'] : null;
        $this->container['service_options_charge'] = isset($data['service_options_charge']) ? $data['service_options_charge'] : null;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
        $this->container['tax_charge'] = isset($data['tax_charge']) ? $data['tax_charge'] : null;
        $this->container['total_charge'] = isset($data['total_charge']) ? $data['total_charge'] : null;
        $this->container['total_charge_with_tax'] = isset($data['total_charge_with_tax']) ? $data['total_charge_with_tax'] : null;
        $this->container['ship_discount'] = isset($data['ship_discount']) ? $data['ship_discount'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rate_id
     *
     * @return string
     */
    public function getRateId()
    {
        return $this->container['rate_id'];
    }

    /**
     * Sets rate_id
     *
     * @param string $rate_id rate_id
     *
     * @return $this
     */
    public function setRateId($rate_id)
    {
        $this->container['rate_id'] = $rate_id;

        return $this;
    }

    /**
     * Gets service_code
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param string $service_code service_code
     *
     * @return $this
     */
    public function setServiceCode($service_code)
    {
        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets service_description
     *
     * @return string
     */
    public function getServiceDescription()
    {
        return $this->container['service_description'];
    }

    /**
     * Sets service_description
     *
     * @param string $service_description service_description
     *
     * @return $this
     */
    public function setServiceDescription($service_description)
    {
        $this->container['service_description'] = $service_description;

        return $this;
    }

    /**
     * Gets rate_chart
     *
     * @return string
     */
    public function getRateChart()
    {
        return $this->container['rate_chart'];
    }

    /**
     * Sets rate_chart
     *
     * @param string $rate_chart rate_chart
     *
     * @return $this
     */
    public function setRateChart($rate_chart)
    {
        $this->container['rate_chart'] = $rate_chart;

        return $this;
    }

    /**
     * Gets billable_weight_calculation_method
     *
     * @return string
     */
    public function getBillableWeightCalculationMethod()
    {
        return $this->container['billable_weight_calculation_method'];
    }

    /**
     * Sets billable_weight_calculation_method
     *
     * @param string $billable_weight_calculation_method billable_weight_calculation_method
     *
     * @return $this
     */
    public function setBillableWeightCalculationMethod($billable_weight_calculation_method)
    {
        $this->container['billable_weight_calculation_method'] = $billable_weight_calculation_method;

        return $this;
    }

    /**
     * Gets rating_method
     *
     * @return string
     */
    public function getRatingMethod()
    {
        return $this->container['rating_method'];
    }

    /**
     * Sets rating_method
     *
     * @param string $rating_method rating_method
     *
     * @return $this
     */
    public function setRatingMethod($rating_method)
    {
        $this->container['rating_method'] = $rating_method;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string $weight_unit weight_unit
     *
     * @return $this
     */
    public function setWeightUnit($weight_unit)
    {
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets length
     *
     * @return string
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param string $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets dim_unit
     *
     * @return string
     */
    public function getDimUnit()
    {
        return $this->container['dim_unit'];
    }

    /**
     * Sets dim_unit
     *
     * @param string $dim_unit dim_unit
     *
     * @return $this
     */
    public function setDimUnit($dim_unit)
    {
        $this->container['dim_unit'] = $dim_unit;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets transportation_charge
     *
     * @return string
     */
    public function getTransportationCharge()
    {
        return $this->container['transportation_charge'];
    }

    /**
     * Sets transportation_charge
     *
     * @param string $transportation_charge transportation_charge
     *
     * @return $this
     */
    public function setTransportationCharge($transportation_charge)
    {
        $this->container['transportation_charge'] = $transportation_charge;

        return $this;
    }

    /**
     * Gets service_charge
     *
     * @return string
     */
    public function getServiceCharge()
    {
        return $this->container['service_charge'];
    }

    /**
     * Sets service_charge
     *
     * @param string $service_charge service_charge
     *
     * @return $this
     */
    public function setServiceCharge($service_charge)
    {
        $this->container['service_charge'] = $service_charge;

        return $this;
    }

    /**
     * Gets service_options_charge
     *
     * @return string
     */
    public function getServiceOptionsCharge()
    {
        return $this->container['service_options_charge'];
    }

    /**
     * Sets service_options_charge
     *
     * @param string $service_options_charge service_options_charge
     *
     * @return $this
     */
    public function setServiceOptionsCharge($service_options_charge)
    {
        $this->container['service_options_charge'] = $service_options_charge;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type tax_type
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets tax_charge
     *
     * @return string
     */
    public function getTaxCharge()
    {
        return $this->container['tax_charge'];
    }

    /**
     * Sets tax_charge
     *
     * @param string $tax_charge tax_charge
     *
     * @return $this
     */
    public function setTaxCharge($tax_charge)
    {
        $this->container['tax_charge'] = $tax_charge;

        return $this;
    }

    /**
     * Gets total_charge
     *
     * @return string
     */
    public function getTotalCharge()
    {
        return $this->container['total_charge'];
    }

    /**
     * Sets total_charge
     *
     * @param string $total_charge total_charge
     *
     * @return $this
     */
    public function setTotalCharge($total_charge)
    {
        $this->container['total_charge'] = $total_charge;

        return $this;
    }

    /**
     * Gets total_charge_with_tax
     *
     * @return string
     */
    public function getTotalChargeWithTax()
    {
        return $this->container['total_charge_with_tax'];
    }

    /**
     * Sets total_charge_with_tax
     *
     * @param string $total_charge_with_tax total_charge_with_tax
     *
     * @return $this
     */
    public function setTotalChargeWithTax($total_charge_with_tax)
    {
        $this->container['total_charge_with_tax'] = $total_charge_with_tax;

        return $this;
    }

    /**
     * Gets ship_discount
     *
     * @return string
     */
    public function getShipDiscount()
    {
        return $this->container['ship_discount'];
    }

    /**
     * Sets ship_discount
     *
     * @param string $ship_discount ship_discount
     *
     * @return $this
     */
    public function setShipDiscount($ship_discount)
    {
        $this->container['ship_discount'] = $ship_discount;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string $delivery_date delivery_date
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
