<?php
/**
 * UpsLiveRatesSettingsData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpsLiveRatesSettingsData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpsLiveRatesSettingsData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpsLiveRatesSettingsData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_info' => 'string',
        'request_option' => 'string',
        'pickup_type' => 'string',
        'negotiated_rates_indicator' => 'bool',
        'customer_classification' => 'string',
        'shipment_indication_type' => 'string',
        'service_additional_descriptions' => '\Swagger\Client\Model\ServiceAdditionalDescription[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_info' => null,
        'request_option' => null,
        'pickup_type' => null,
        'negotiated_rates_indicator' => null,
        'customer_classification' => null,
        'shipment_indication_type' => null,
        'service_additional_descriptions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_info' => 'additionalInfo',
        'request_option' => 'requestOption',
        'pickup_type' => 'pickupType',
        'negotiated_rates_indicator' => 'negotiatedRatesIndicator',
        'customer_classification' => 'customerClassification',
        'shipment_indication_type' => 'shipmentIndicationType',
        'service_additional_descriptions' => 'serviceAdditionalDescriptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_info' => 'setAdditionalInfo',
        'request_option' => 'setRequestOption',
        'pickup_type' => 'setPickupType',
        'negotiated_rates_indicator' => 'setNegotiatedRatesIndicator',
        'customer_classification' => 'setCustomerClassification',
        'shipment_indication_type' => 'setShipmentIndicationType',
        'service_additional_descriptions' => 'setServiceAdditionalDescriptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_info' => 'getAdditionalInfo',
        'request_option' => 'getRequestOption',
        'pickup_type' => 'getPickupType',
        'negotiated_rates_indicator' => 'getNegotiatedRatesIndicator',
        'customer_classification' => 'getCustomerClassification',
        'shipment_indication_type' => 'getShipmentIndicationType',
        'service_additional_descriptions' => 'getServiceAdditionalDescriptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ADDITIONAL_INFO_TIME_IN_TRANSIT = 'TIME_IN_TRANSIT';
    const REQUEST_OPTION_RATE = 'RATE';
    const REQUEST_OPTION_SHOP = 'SHOP';
    const REQUEST_OPTION_RATE_TIME_IN_TRANSIT = 'RATE_TIME_IN_TRANSIT';
    const REQUEST_OPTION_SHOP_TIME_IN_TRANSIT = 'SHOP_TIME_IN_TRANSIT';
    const PICKUP_TYPE_DAILY_PICKUP = 'DAILY_PICKUP';
    const PICKUP_TYPE_CUSTOMER_COUNTER = 'CUSTOMER_COUNTER';
    const PICKUP_TYPE_ONE_TIME_PICKUP = 'ONE_TIME_PICKUP';
    const PICKUP_TYPE_LETTER_CENTER = 'LETTER_CENTER';
    const PICKUP_TYPE_AIR_SERVICE_CENTER = 'AIR_SERVICE_CENTER';
    const CUSTOMER_CLASSIFICATION_ASSOCIATED_WITH_SHIPPER = 'ASSOCIATED_WITH_SHIPPER';
    const CUSTOMER_CLASSIFICATION_DAILY_RATES = 'DAILY_RATES';
    const CUSTOMER_CLASSIFICATION_RETAIL_RATES = 'RETAIL_RATES';
    const CUSTOMER_CLASSIFICATION_REGIONAL_RATES = 'REGIONAL_RATES';
    const CUSTOMER_CLASSIFICATION_GENERAL_LIST_RATES = 'GENERAL_LIST_RATES';
    const CUSTOMER_CLASSIFICATION_STANDARD_LIST_RATES = 'STANDARD_LIST_RATES';
    const SHIPMENT_INDICATION_TYPE_HOLD_FOR_PICKUP = 'HOLD_FOR_PICKUP';
    const SHIPMENT_INDICATION_TYPE_ACCESS_POINT_DELIVER = 'ACCESS_POINT_DELIVER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdditionalInfoAllowableValues()
    {
        return [
            self::ADDITIONAL_INFO_TIME_IN_TRANSIT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestOptionAllowableValues()
    {
        return [
            self::REQUEST_OPTION_RATE,
            self::REQUEST_OPTION_SHOP,
            self::REQUEST_OPTION_RATE_TIME_IN_TRANSIT,
            self::REQUEST_OPTION_SHOP_TIME_IN_TRANSIT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPickupTypeAllowableValues()
    {
        return [
            self::PICKUP_TYPE_DAILY_PICKUP,
            self::PICKUP_TYPE_CUSTOMER_COUNTER,
            self::PICKUP_TYPE_ONE_TIME_PICKUP,
            self::PICKUP_TYPE_LETTER_CENTER,
            self::PICKUP_TYPE_AIR_SERVICE_CENTER,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerClassificationAllowableValues()
    {
        return [
            self::CUSTOMER_CLASSIFICATION_ASSOCIATED_WITH_SHIPPER,
            self::CUSTOMER_CLASSIFICATION_DAILY_RATES,
            self::CUSTOMER_CLASSIFICATION_RETAIL_RATES,
            self::CUSTOMER_CLASSIFICATION_REGIONAL_RATES,
            self::CUSTOMER_CLASSIFICATION_GENERAL_LIST_RATES,
            self::CUSTOMER_CLASSIFICATION_STANDARD_LIST_RATES,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentIndicationTypeAllowableValues()
    {
        return [
            self::SHIPMENT_INDICATION_TYPE_HOLD_FOR_PICKUP,
            self::SHIPMENT_INDICATION_TYPE_ACCESS_POINT_DELIVER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_info'] = isset($data['additional_info']) ? $data['additional_info'] : null;
        $this->container['request_option'] = isset($data['request_option']) ? $data['request_option'] : null;
        $this->container['pickup_type'] = isset($data['pickup_type']) ? $data['pickup_type'] : null;
        $this->container['negotiated_rates_indicator'] = isset($data['negotiated_rates_indicator']) ? $data['negotiated_rates_indicator'] : null;
        $this->container['customer_classification'] = isset($data['customer_classification']) ? $data['customer_classification'] : null;
        $this->container['shipment_indication_type'] = isset($data['shipment_indication_type']) ? $data['shipment_indication_type'] : null;
        $this->container['service_additional_descriptions'] = isset($data['service_additional_descriptions']) ? $data['service_additional_descriptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAdditionalInfoAllowableValues();
        if (!is_null($this->container['additional_info']) && !in_array($this->container['additional_info'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'additional_info', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequestOptionAllowableValues();
        if (!is_null($this->container['request_option']) && !in_array($this->container['request_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'request_option', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPickupTypeAllowableValues();
        if (!is_null($this->container['pickup_type']) && !in_array($this->container['pickup_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pickup_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCustomerClassificationAllowableValues();
        if (!is_null($this->container['customer_classification']) && !in_array($this->container['customer_classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'customer_classification', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShipmentIndicationTypeAllowableValues();
        if (!is_null($this->container['shipment_indication_type']) && !in_array($this->container['shipment_indication_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipment_indication_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_info
     *
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param string $additional_info additional_info
     *
     * @return $this
     */
    public function setAdditionalInfo($additional_info)
    {
        $allowedValues = $this->getAdditionalInfoAllowableValues();
        if (!is_null($additional_info) && !in_array($additional_info, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'additional_info', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets request_option
     *
     * @return string
     */
    public function getRequestOption()
    {
        return $this->container['request_option'];
    }

    /**
     * Sets request_option
     *
     * @param string $request_option request_option
     *
     * @return $this
     */
    public function setRequestOption($request_option)
    {
        $allowedValues = $this->getRequestOptionAllowableValues();
        if (!is_null($request_option) && !in_array($request_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'request_option', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request_option'] = $request_option;

        return $this;
    }

    /**
     * Gets pickup_type
     *
     * @return string
     */
    public function getPickupType()
    {
        return $this->container['pickup_type'];
    }

    /**
     * Sets pickup_type
     *
     * @param string $pickup_type pickup_type
     *
     * @return $this
     */
    public function setPickupType($pickup_type)
    {
        $allowedValues = $this->getPickupTypeAllowableValues();
        if (!is_null($pickup_type) && !in_array($pickup_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pickup_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pickup_type'] = $pickup_type;

        return $this;
    }

    /**
     * Gets negotiated_rates_indicator
     *
     * @return bool
     */
    public function getNegotiatedRatesIndicator()
    {
        return $this->container['negotiated_rates_indicator'];
    }

    /**
     * Sets negotiated_rates_indicator
     *
     * @param bool $negotiated_rates_indicator negotiated_rates_indicator
     *
     * @return $this
     */
    public function setNegotiatedRatesIndicator($negotiated_rates_indicator)
    {
        $this->container['negotiated_rates_indicator'] = $negotiated_rates_indicator;

        return $this;
    }

    /**
     * Gets customer_classification
     *
     * @return string
     */
    public function getCustomerClassification()
    {
        return $this->container['customer_classification'];
    }

    /**
     * Sets customer_classification
     *
     * @param string $customer_classification customer_classification
     *
     * @return $this
     */
    public function setCustomerClassification($customer_classification)
    {
        $allowedValues = $this->getCustomerClassificationAllowableValues();
        if (!is_null($customer_classification) && !in_array($customer_classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'customer_classification', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customer_classification'] = $customer_classification;

        return $this;
    }

    /**
     * Gets shipment_indication_type
     *
     * @return string
     */
    public function getShipmentIndicationType()
    {
        return $this->container['shipment_indication_type'];
    }

    /**
     * Sets shipment_indication_type
     *
     * @param string $shipment_indication_type shipment_indication_type
     *
     * @return $this
     */
    public function setShipmentIndicationType($shipment_indication_type)
    {
        $allowedValues = $this->getShipmentIndicationTypeAllowableValues();
        if (!is_null($shipment_indication_type) && !in_array($shipment_indication_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipment_indication_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_indication_type'] = $shipment_indication_type;

        return $this;
    }

    /**
     * Gets service_additional_descriptions
     *
     * @return \Swagger\Client\Model\ServiceAdditionalDescription[]
     */
    public function getServiceAdditionalDescriptions()
    {
        return $this->container['service_additional_descriptions'];
    }

    /**
     * Sets service_additional_descriptions
     *
     * @param \Swagger\Client\Model\ServiceAdditionalDescription[] $service_additional_descriptions service_additional_descriptions
     *
     * @return $this
     */
    public function setServiceAdditionalDescriptions($service_additional_descriptions)
    {
        $this->container['service_additional_descriptions'] = $service_additional_descriptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
