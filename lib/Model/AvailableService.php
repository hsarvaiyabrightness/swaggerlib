<?php
/**
 * AvailableService
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AvailableService Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AvailableService implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AvailableService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'service_name' => 'string',
        'service_code' => 'string',
        'service_tag' => 'string',
        'service_group' => 'string',
        'service_unique_id' => 'string',
        'config_items' => '\Swagger\Client\Model\LinnworksUserConfigItem[]',
        'service_property' => '\Swagger\Client\Model\ServiceProperty[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'service_name' => null,
        'service_code' => null,
        'service_tag' => null,
        'service_group' => null,
        'service_unique_id' => null,
        'config_items' => null,
        'service_property' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'service_name' => 'ServiceName',
        'service_code' => 'ServiceCode',
        'service_tag' => 'ServiceTag',
        'service_group' => 'ServiceGroup',
        'service_unique_id' => 'ServiceUniqueId',
        'config_items' => 'ConfigItems',
        'service_property' => 'ServiceProperty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'service_name' => 'setServiceName',
        'service_code' => 'setServiceCode',
        'service_tag' => 'setServiceTag',
        'service_group' => 'setServiceGroup',
        'service_unique_id' => 'setServiceUniqueId',
        'config_items' => 'setConfigItems',
        'service_property' => 'setServiceProperty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'service_name' => 'getServiceName',
        'service_code' => 'getServiceCode',
        'service_tag' => 'getServiceTag',
        'service_group' => 'getServiceGroup',
        'service_unique_id' => 'getServiceUniqueId',
        'config_items' => 'getConfigItems',
        'service_property' => 'getServiceProperty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['service_name'] = isset($data['service_name']) ? $data['service_name'] : null;
        $this->container['service_code'] = isset($data['service_code']) ? $data['service_code'] : null;
        $this->container['service_tag'] = isset($data['service_tag']) ? $data['service_tag'] : null;
        $this->container['service_group'] = isset($data['service_group']) ? $data['service_group'] : null;
        $this->container['service_unique_id'] = isset($data['service_unique_id']) ? $data['service_unique_id'] : null;
        $this->container['config_items'] = isset($data['config_items']) ? $data['config_items'] : null;
        $this->container['service_property'] = isset($data['service_property']) ? $data['service_property'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets service_name
     *
     * @return string
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string $service_name service_name
     *
     * @return $this
     */
    public function setServiceName($service_name)
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets service_code
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param string $service_code service_code
     *
     * @return $this
     */
    public function setServiceCode($service_code)
    {
        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets service_tag
     *
     * @return string
     */
    public function getServiceTag()
    {
        return $this->container['service_tag'];
    }

    /**
     * Sets service_tag
     *
     * @param string $service_tag service_tag
     *
     * @return $this
     */
    public function setServiceTag($service_tag)
    {
        $this->container['service_tag'] = $service_tag;

        return $this;
    }

    /**
     * Gets service_group
     *
     * @return string
     */
    public function getServiceGroup()
    {
        return $this->container['service_group'];
    }

    /**
     * Sets service_group
     *
     * @param string $service_group service_group
     *
     * @return $this
     */
    public function setServiceGroup($service_group)
    {
        $this->container['service_group'] = $service_group;

        return $this;
    }

    /**
     * Gets service_unique_id
     *
     * @return string
     */
    public function getServiceUniqueId()
    {
        return $this->container['service_unique_id'];
    }

    /**
     * Sets service_unique_id
     *
     * @param string $service_unique_id service_unique_id
     *
     * @return $this
     */
    public function setServiceUniqueId($service_unique_id)
    {
        $this->container['service_unique_id'] = $service_unique_id;

        return $this;
    }

    /**
     * Gets config_items
     *
     * @return \Swagger\Client\Model\LinnworksUserConfigItem[]
     */
    public function getConfigItems()
    {
        return $this->container['config_items'];
    }

    /**
     * Sets config_items
     *
     * @param \Swagger\Client\Model\LinnworksUserConfigItem[] $config_items config_items
     *
     * @return $this
     */
    public function setConfigItems($config_items)
    {
        $this->container['config_items'] = $config_items;

        return $this;
    }

    /**
     * Gets service_property
     *
     * @return \Swagger\Client\Model\ServiceProperty[]
     */
    public function getServiceProperty()
    {
        return $this->container['service_property'];
    }

    /**
     * Sets service_property
     *
     * @param \Swagger\Client\Model\ServiceProperty[] $service_property service_property
     *
     * @return $this
     */
    public function setServiceProperty($service_property)
    {
        $this->container['service_property'] = $service_property;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
