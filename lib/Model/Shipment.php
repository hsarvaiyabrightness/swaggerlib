<?php
/**
 * Shipment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Shipment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Shipment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'label_format' => 'string',
        'shipper_reference' => 'string',
        'order_reference' => 'string',
        'order_date' => '\DateTime',
        'display_id' => 'string',
        'invoice_number' => 'string',
        'service' => 'string',
        'weight' => 'string',
        'weight_unit' => 'string',
        'length' => 'string',
        'width' => 'string',
        'height' => 'string',
        'dim_unit' => 'string',
        'value' => 'string',
        'shipping_value' => 'string',
        'currency' => 'string',
        'customs_duty' => 'string',
        'description' => 'string',
        'declaration_type' => 'string',
        'dangerous_goods' => 'string',
        'export_carrier_name' => 'string',
        'export_awb' => 'string',
        'consignor_address' => '\Swagger\Client\Model\ConsignorAddress',
        'consignee_address' => '\Swagger\Client\Model\ConsigneeAddress',
        'products' => '\Swagger\Client\Model\Product[]',
        'return_service_type' => 'string',
        'source' => 'string',
        'shipment_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'label_format' => null,
        'shipper_reference' => null,
        'order_reference' => null,
        'order_date' => 'date-time',
        'display_id' => null,
        'invoice_number' => null,
        'service' => null,
        'weight' => null,
        'weight_unit' => null,
        'length' => null,
        'width' => null,
        'height' => null,
        'dim_unit' => null,
        'value' => null,
        'shipping_value' => null,
        'currency' => null,
        'customs_duty' => null,
        'description' => null,
        'declaration_type' => null,
        'dangerous_goods' => null,
        'export_carrier_name' => null,
        'export_awb' => null,
        'consignor_address' => null,
        'consignee_address' => null,
        'products' => null,
        'return_service_type' => null,
        'source' => null,
        'shipment_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label_format' => 'labelFormat',
        'shipper_reference' => 'shipperReference',
        'order_reference' => 'orderReference',
        'order_date' => 'orderDate',
        'display_id' => 'displayId',
        'invoice_number' => 'invoiceNumber',
        'service' => 'service',
        'weight' => 'weight',
        'weight_unit' => 'weightUnit',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'dim_unit' => 'dimUnit',
        'value' => 'value',
        'shipping_value' => 'shippingValue',
        'currency' => 'currency',
        'customs_duty' => 'customsDuty',
        'description' => 'description',
        'declaration_type' => 'declarationType',
        'dangerous_goods' => 'dangerousGoods',
        'export_carrier_name' => 'exportCarrierName',
        'export_awb' => 'exportAwb',
        'consignor_address' => 'consignorAddress',
        'consignee_address' => 'consigneeAddress',
        'products' => 'products',
        'return_service_type' => 'returnServiceType',
        'source' => 'source',
        'shipment_id' => 'shipmentId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label_format' => 'setLabelFormat',
        'shipper_reference' => 'setShipperReference',
        'order_reference' => 'setOrderReference',
        'order_date' => 'setOrderDate',
        'display_id' => 'setDisplayId',
        'invoice_number' => 'setInvoiceNumber',
        'service' => 'setService',
        'weight' => 'setWeight',
        'weight_unit' => 'setWeightUnit',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'dim_unit' => 'setDimUnit',
        'value' => 'setValue',
        'shipping_value' => 'setShippingValue',
        'currency' => 'setCurrency',
        'customs_duty' => 'setCustomsDuty',
        'description' => 'setDescription',
        'declaration_type' => 'setDeclarationType',
        'dangerous_goods' => 'setDangerousGoods',
        'export_carrier_name' => 'setExportCarrierName',
        'export_awb' => 'setExportAwb',
        'consignor_address' => 'setConsignorAddress',
        'consignee_address' => 'setConsigneeAddress',
        'products' => 'setProducts',
        'return_service_type' => 'setReturnServiceType',
        'source' => 'setSource',
        'shipment_id' => 'setShipmentId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label_format' => 'getLabelFormat',
        'shipper_reference' => 'getShipperReference',
        'order_reference' => 'getOrderReference',
        'order_date' => 'getOrderDate',
        'display_id' => 'getDisplayId',
        'invoice_number' => 'getInvoiceNumber',
        'service' => 'getService',
        'weight' => 'getWeight',
        'weight_unit' => 'getWeightUnit',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'dim_unit' => 'getDimUnit',
        'value' => 'getValue',
        'shipping_value' => 'getShippingValue',
        'currency' => 'getCurrency',
        'customs_duty' => 'getCustomsDuty',
        'description' => 'getDescription',
        'declaration_type' => 'getDeclarationType',
        'dangerous_goods' => 'getDangerousGoods',
        'export_carrier_name' => 'getExportCarrierName',
        'export_awb' => 'getExportAwb',
        'consignor_address' => 'getConsignorAddress',
        'consignee_address' => 'getConsigneeAddress',
        'products' => 'getProducts',
        'return_service_type' => 'getReturnServiceType',
        'source' => 'getSource',
        'shipment_id' => 'getShipmentId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RETURN_SERVICE_TYPE_DROP_OFF = 'DROP_OFF';
    const RETURN_SERVICE_TYPE_PICKUP = 'PICKUP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReturnServiceTypeAllowableValues()
    {
        return [
            self::RETURN_SERVICE_TYPE_DROP_OFF,
            self::RETURN_SERVICE_TYPE_PICKUP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['label_format'] = isset($data['label_format']) ? $data['label_format'] : null;
        $this->container['shipper_reference'] = isset($data['shipper_reference']) ? $data['shipper_reference'] : null;
        $this->container['order_reference'] = isset($data['order_reference']) ? $data['order_reference'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['display_id'] = isset($data['display_id']) ? $data['display_id'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['weight_unit'] = isset($data['weight_unit']) ? $data['weight_unit'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['dim_unit'] = isset($data['dim_unit']) ? $data['dim_unit'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['shipping_value'] = isset($data['shipping_value']) ? $data['shipping_value'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['customs_duty'] = isset($data['customs_duty']) ? $data['customs_duty'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['declaration_type'] = isset($data['declaration_type']) ? $data['declaration_type'] : null;
        $this->container['dangerous_goods'] = isset($data['dangerous_goods']) ? $data['dangerous_goods'] : null;
        $this->container['export_carrier_name'] = isset($data['export_carrier_name']) ? $data['export_carrier_name'] : null;
        $this->container['export_awb'] = isset($data['export_awb']) ? $data['export_awb'] : null;
        $this->container['consignor_address'] = isset($data['consignor_address']) ? $data['consignor_address'] : null;
        $this->container['consignee_address'] = isset($data['consignee_address']) ? $data['consignee_address'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['return_service_type'] = isset($data['return_service_type']) ? $data['return_service_type'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['shipment_id'] = isset($data['shipment_id']) ? $data['shipment_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReturnServiceTypeAllowableValues();
        if (!is_null($this->container['return_service_type']) && !in_array($this->container['return_service_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'return_service_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label_format
     *
     * @return string
     */
    public function getLabelFormat()
    {
        return $this->container['label_format'];
    }

    /**
     * Sets label_format
     *
     * @param string $label_format label_format
     *
     * @return $this
     */
    public function setLabelFormat($label_format)
    {
        $this->container['label_format'] = $label_format;

        return $this;
    }

    /**
     * Gets shipper_reference
     *
     * @return string
     */
    public function getShipperReference()
    {
        return $this->container['shipper_reference'];
    }

    /**
     * Sets shipper_reference
     *
     * @param string $shipper_reference shipper_reference
     *
     * @return $this
     */
    public function setShipperReference($shipper_reference)
    {
        $this->container['shipper_reference'] = $shipper_reference;

        return $this;
    }

    /**
     * Gets order_reference
     *
     * @return string
     */
    public function getOrderReference()
    {
        return $this->container['order_reference'];
    }

    /**
     * Sets order_reference
     *
     * @param string $order_reference order_reference
     *
     * @return $this
     */
    public function setOrderReference($order_reference)
    {
        $this->container['order_reference'] = $order_reference;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date order_date
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets display_id
     *
     * @return string
     */
    public function getDisplayId()
    {
        return $this->container['display_id'];
    }

    /**
     * Sets display_id
     *
     * @param string $display_id display_id
     *
     * @return $this
     */
    public function setDisplayId($display_id)
    {
        $this->container['display_id'] = $display_id;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string $service service
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string $weight_unit weight_unit
     *
     * @return $this
     */
    public function setWeightUnit($weight_unit)
    {
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets length
     *
     * @return string
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param string $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets dim_unit
     *
     * @return string
     */
    public function getDimUnit()
    {
        return $this->container['dim_unit'];
    }

    /**
     * Sets dim_unit
     *
     * @param string $dim_unit dim_unit
     *
     * @return $this
     */
    public function setDimUnit($dim_unit)
    {
        $this->container['dim_unit'] = $dim_unit;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets shipping_value
     *
     * @return string
     */
    public function getShippingValue()
    {
        return $this->container['shipping_value'];
    }

    /**
     * Sets shipping_value
     *
     * @param string $shipping_value shipping_value
     *
     * @return $this
     */
    public function setShippingValue($shipping_value)
    {
        $this->container['shipping_value'] = $shipping_value;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customs_duty
     *
     * @return string
     */
    public function getCustomsDuty()
    {
        return $this->container['customs_duty'];
    }

    /**
     * Sets customs_duty
     *
     * @param string $customs_duty customs_duty
     *
     * @return $this
     */
    public function setCustomsDuty($customs_duty)
    {
        $this->container['customs_duty'] = $customs_duty;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets declaration_type
     *
     * @return string
     */
    public function getDeclarationType()
    {
        return $this->container['declaration_type'];
    }

    /**
     * Sets declaration_type
     *
     * @param string $declaration_type declaration_type
     *
     * @return $this
     */
    public function setDeclarationType($declaration_type)
    {
        $this->container['declaration_type'] = $declaration_type;

        return $this;
    }

    /**
     * Gets dangerous_goods
     *
     * @return string
     */
    public function getDangerousGoods()
    {
        return $this->container['dangerous_goods'];
    }

    /**
     * Sets dangerous_goods
     *
     * @param string $dangerous_goods dangerous_goods
     *
     * @return $this
     */
    public function setDangerousGoods($dangerous_goods)
    {
        $this->container['dangerous_goods'] = $dangerous_goods;

        return $this;
    }

    /**
     * Gets export_carrier_name
     *
     * @return string
     */
    public function getExportCarrierName()
    {
        return $this->container['export_carrier_name'];
    }

    /**
     * Sets export_carrier_name
     *
     * @param string $export_carrier_name export_carrier_name
     *
     * @return $this
     */
    public function setExportCarrierName($export_carrier_name)
    {
        $this->container['export_carrier_name'] = $export_carrier_name;

        return $this;
    }

    /**
     * Gets export_awb
     *
     * @return string
     */
    public function getExportAwb()
    {
        return $this->container['export_awb'];
    }

    /**
     * Sets export_awb
     *
     * @param string $export_awb export_awb
     *
     * @return $this
     */
    public function setExportAwb($export_awb)
    {
        $this->container['export_awb'] = $export_awb;

        return $this;
    }

    /**
     * Gets consignor_address
     *
     * @return \Swagger\Client\Model\ConsignorAddress
     */
    public function getConsignorAddress()
    {
        return $this->container['consignor_address'];
    }

    /**
     * Sets consignor_address
     *
     * @param \Swagger\Client\Model\ConsignorAddress $consignor_address consignor_address
     *
     * @return $this
     */
    public function setConsignorAddress($consignor_address)
    {
        $this->container['consignor_address'] = $consignor_address;

        return $this;
    }

    /**
     * Gets consignee_address
     *
     * @return \Swagger\Client\Model\ConsigneeAddress
     */
    public function getConsigneeAddress()
    {
        return $this->container['consignee_address'];
    }

    /**
     * Sets consignee_address
     *
     * @param \Swagger\Client\Model\ConsigneeAddress $consignee_address consignee_address
     *
     * @return $this
     */
    public function setConsigneeAddress($consignee_address)
    {
        $this->container['consignee_address'] = $consignee_address;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Swagger\Client\Model\Product[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Swagger\Client\Model\Product[] $products products
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets return_service_type
     *
     * @return string
     */
    public function getReturnServiceType()
    {
        return $this->container['return_service_type'];
    }

    /**
     * Sets return_service_type
     *
     * @param string $return_service_type return_service_type
     *
     * @return $this
     */
    public function setReturnServiceType($return_service_type)
    {
        $allowedValues = $this->getReturnServiceTypeAllowableValues();
        if (!is_null($return_service_type) && !in_array($return_service_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'return_service_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['return_service_type'] = $return_service_type;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets shipment_id
     *
     * @return string
     */
    public function getShipmentId()
    {
        return $this->container['shipment_id'];
    }

    /**
     * Sets shipment_id
     *
     * @param string $shipment_id shipment_id
     *
     * @return $this
     */
    public function setShipmentId($shipment_id)
    {
        $this->container['shipment_id'] = $shipment_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
