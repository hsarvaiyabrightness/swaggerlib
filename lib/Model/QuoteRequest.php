<?php
/**
 * QuoteRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QuoteRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QuoteRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QuoteRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_details_list' => '\Swagger\Client\Model\LineItem[]',
        'address_info' => '\Swagger\Client\Model\AddressInfo',
        'currency_code' => 'string',
        'customs_duty' => 'string',
        'insurance' => 'bool',
        'service_level' => 'int',
        'order_reference' => 'string',
        'other_discount' => 'double',
        'other_discount_currency' => 'string',
        'tracking_number' => 'string',
        'always_quote' => 'bool',
        'vat' => 'string',
        'promo_code' => 'string',
        'weight' => 'double',
        'length' => 'double',
        'width' => 'double',
        'height' => 'double',
        'dim_unit' => 'string',
        'weight_unit' => 'string',
        'shipping_value' => 'string',
        'shipping_value_currency' => 'string',
        'track_by_email' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_details_list' => null,
        'address_info' => null,
        'currency_code' => null,
        'customs_duty' => null,
        'insurance' => null,
        'service_level' => 'int32',
        'order_reference' => null,
        'other_discount' => 'double',
        'other_discount_currency' => null,
        'tracking_number' => null,
        'always_quote' => null,
        'vat' => null,
        'promo_code' => null,
        'weight' => 'double',
        'length' => 'double',
        'width' => 'double',
        'height' => 'double',
        'dim_unit' => null,
        'weight_unit' => null,
        'shipping_value' => null,
        'shipping_value_currency' => null,
        'track_by_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_details_list' => 'itemDetailsList',
        'address_info' => 'addressInfo',
        'currency_code' => 'currencyCode',
        'customs_duty' => 'customsDuty',
        'insurance' => 'insurance',
        'service_level' => 'serviceLevel',
        'order_reference' => 'orderReference',
        'other_discount' => 'otherDiscount',
        'other_discount_currency' => 'otherDiscountCurrency',
        'tracking_number' => 'trackingNumber',
        'always_quote' => 'alwaysQuote',
        'vat' => 'vat',
        'promo_code' => 'promoCode',
        'weight' => 'weight',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'dim_unit' => 'dimUnit',
        'weight_unit' => 'weightUnit',
        'shipping_value' => 'shippingValue',
        'shipping_value_currency' => 'shippingValueCurrency',
        'track_by_email' => 'trackByEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_details_list' => 'setItemDetailsList',
        'address_info' => 'setAddressInfo',
        'currency_code' => 'setCurrencyCode',
        'customs_duty' => 'setCustomsDuty',
        'insurance' => 'setInsurance',
        'service_level' => 'setServiceLevel',
        'order_reference' => 'setOrderReference',
        'other_discount' => 'setOtherDiscount',
        'other_discount_currency' => 'setOtherDiscountCurrency',
        'tracking_number' => 'setTrackingNumber',
        'always_quote' => 'setAlwaysQuote',
        'vat' => 'setVat',
        'promo_code' => 'setPromoCode',
        'weight' => 'setWeight',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'dim_unit' => 'setDimUnit',
        'weight_unit' => 'setWeightUnit',
        'shipping_value' => 'setShippingValue',
        'shipping_value_currency' => 'setShippingValueCurrency',
        'track_by_email' => 'setTrackByEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_details_list' => 'getItemDetailsList',
        'address_info' => 'getAddressInfo',
        'currency_code' => 'getCurrencyCode',
        'customs_duty' => 'getCustomsDuty',
        'insurance' => 'getInsurance',
        'service_level' => 'getServiceLevel',
        'order_reference' => 'getOrderReference',
        'other_discount' => 'getOtherDiscount',
        'other_discount_currency' => 'getOtherDiscountCurrency',
        'tracking_number' => 'getTrackingNumber',
        'always_quote' => 'getAlwaysQuote',
        'vat' => 'getVat',
        'promo_code' => 'getPromoCode',
        'weight' => 'getWeight',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'dim_unit' => 'getDimUnit',
        'weight_unit' => 'getWeightUnit',
        'shipping_value' => 'getShippingValue',
        'shipping_value_currency' => 'getShippingValueCurrency',
        'track_by_email' => 'getTrackByEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_details_list'] = isset($data['item_details_list']) ? $data['item_details_list'] : null;
        $this->container['address_info'] = isset($data['address_info']) ? $data['address_info'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['customs_duty'] = isset($data['customs_duty']) ? $data['customs_duty'] : null;
        $this->container['insurance'] = isset($data['insurance']) ? $data['insurance'] : null;
        $this->container['service_level'] = isset($data['service_level']) ? $data['service_level'] : null;
        $this->container['order_reference'] = isset($data['order_reference']) ? $data['order_reference'] : null;
        $this->container['other_discount'] = isset($data['other_discount']) ? $data['other_discount'] : null;
        $this->container['other_discount_currency'] = isset($data['other_discount_currency']) ? $data['other_discount_currency'] : null;
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['always_quote'] = isset($data['always_quote']) ? $data['always_quote'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['promo_code'] = isset($data['promo_code']) ? $data['promo_code'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['dim_unit'] = isset($data['dim_unit']) ? $data['dim_unit'] : null;
        $this->container['weight_unit'] = isset($data['weight_unit']) ? $data['weight_unit'] : null;
        $this->container['shipping_value'] = isset($data['shipping_value']) ? $data['shipping_value'] : null;
        $this->container['shipping_value_currency'] = isset($data['shipping_value_currency']) ? $data['shipping_value_currency'] : null;
        $this->container['track_by_email'] = isset($data['track_by_email']) ? $data['track_by_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_details_list
     *
     * @return \Swagger\Client\Model\LineItem[]
     */
    public function getItemDetailsList()
    {
        return $this->container['item_details_list'];
    }

    /**
     * Sets item_details_list
     *
     * @param \Swagger\Client\Model\LineItem[] $item_details_list item_details_list
     *
     * @return $this
     */
    public function setItemDetailsList($item_details_list)
    {
        $this->container['item_details_list'] = $item_details_list;

        return $this;
    }

    /**
     * Gets address_info
     *
     * @return \Swagger\Client\Model\AddressInfo
     */
    public function getAddressInfo()
    {
        return $this->container['address_info'];
    }

    /**
     * Sets address_info
     *
     * @param \Swagger\Client\Model\AddressInfo $address_info address_info
     *
     * @return $this
     */
    public function setAddressInfo($address_info)
    {
        $this->container['address_info'] = $address_info;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets customs_duty
     *
     * @return string
     */
    public function getCustomsDuty()
    {
        return $this->container['customs_duty'];
    }

    /**
     * Sets customs_duty
     *
     * @param string $customs_duty customs_duty
     *
     * @return $this
     */
    public function setCustomsDuty($customs_duty)
    {
        $this->container['customs_duty'] = $customs_duty;

        return $this;
    }

    /**
     * Gets insurance
     *
     * @return bool
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     *
     * @param bool $insurance insurance
     *
     * @return $this
     */
    public function setInsurance($insurance)
    {
        $this->container['insurance'] = $insurance;

        return $this;
    }

    /**
     * Gets service_level
     *
     * @return int
     */
    public function getServiceLevel()
    {
        return $this->container['service_level'];
    }

    /**
     * Sets service_level
     *
     * @param int $service_level service_level
     *
     * @return $this
     */
    public function setServiceLevel($service_level)
    {
        $this->container['service_level'] = $service_level;

        return $this;
    }

    /**
     * Gets order_reference
     *
     * @return string
     */
    public function getOrderReference()
    {
        return $this->container['order_reference'];
    }

    /**
     * Sets order_reference
     *
     * @param string $order_reference order_reference
     *
     * @return $this
     */
    public function setOrderReference($order_reference)
    {
        $this->container['order_reference'] = $order_reference;

        return $this;
    }

    /**
     * Gets other_discount
     *
     * @return double
     */
    public function getOtherDiscount()
    {
        return $this->container['other_discount'];
    }

    /**
     * Sets other_discount
     *
     * @param double $other_discount other_discount
     *
     * @return $this
     */
    public function setOtherDiscount($other_discount)
    {
        $this->container['other_discount'] = $other_discount;

        return $this;
    }

    /**
     * Gets other_discount_currency
     *
     * @return string
     */
    public function getOtherDiscountCurrency()
    {
        return $this->container['other_discount_currency'];
    }

    /**
     * Sets other_discount_currency
     *
     * @param string $other_discount_currency other_discount_currency
     *
     * @return $this
     */
    public function setOtherDiscountCurrency($other_discount_currency)
    {
        $this->container['other_discount_currency'] = $other_discount_currency;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string $tracking_number tracking_number
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets always_quote
     *
     * @return bool
     */
    public function getAlwaysQuote()
    {
        return $this->container['always_quote'];
    }

    /**
     * Sets always_quote
     *
     * @param bool $always_quote always_quote
     *
     * @return $this
     */
    public function setAlwaysQuote($always_quote)
    {
        $this->container['always_quote'] = $always_quote;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string $vat vat
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets promo_code
     *
     * @return string
     */
    public function getPromoCode()
    {
        return $this->container['promo_code'];
    }

    /**
     * Sets promo_code
     *
     * @param string $promo_code promo_code
     *
     * @return $this
     */
    public function setPromoCode($promo_code)
    {
        $this->container['promo_code'] = $promo_code;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets length
     *
     * @return double
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param double $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets dim_unit
     *
     * @return string
     */
    public function getDimUnit()
    {
        return $this->container['dim_unit'];
    }

    /**
     * Sets dim_unit
     *
     * @param string $dim_unit dim_unit
     *
     * @return $this
     */
    public function setDimUnit($dim_unit)
    {
        $this->container['dim_unit'] = $dim_unit;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string $weight_unit weight_unit
     *
     * @return $this
     */
    public function setWeightUnit($weight_unit)
    {
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets shipping_value
     *
     * @return string
     */
    public function getShippingValue()
    {
        return $this->container['shipping_value'];
    }

    /**
     * Sets shipping_value
     *
     * @param string $shipping_value shipping_value
     *
     * @return $this
     */
    public function setShippingValue($shipping_value)
    {
        $this->container['shipping_value'] = $shipping_value;

        return $this;
    }

    /**
     * Gets shipping_value_currency
     *
     * @return string
     */
    public function getShippingValueCurrency()
    {
        return $this->container['shipping_value_currency'];
    }

    /**
     * Sets shipping_value_currency
     *
     * @param string $shipping_value_currency shipping_value_currency
     *
     * @return $this
     */
    public function setShippingValueCurrency($shipping_value_currency)
    {
        $this->container['shipping_value_currency'] = $shipping_value_currency;

        return $this;
    }

    /**
     * Gets track_by_email
     *
     * @return bool
     */
    public function getTrackByEmail()
    {
        return $this->container['track_by_email'];
    }

    /**
     * Sets track_by_email
     *
     * @param bool $track_by_email track_by_email
     *
     * @return $this
     */
    public function setTrackByEmail($track_by_email)
    {
        $this->container['track_by_email'] = $track_by_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
