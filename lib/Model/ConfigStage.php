<?php
/**
 * ConfigStage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConfigStage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigStage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConfigStage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'wizard_step_description' => 'string',
        'wizard_step_title' => 'string',
        'config_items' => '\Swagger\Client\Model\LinnworksUserConfigItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'wizard_step_description' => null,
        'wizard_step_title' => null,
        'config_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'wizard_step_description' => 'WizardStepDescription',
        'wizard_step_title' => 'WizardStepTitle',
        'config_items' => 'ConfigItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'wizard_step_description' => 'setWizardStepDescription',
        'wizard_step_title' => 'setWizardStepTitle',
        'config_items' => 'setConfigItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'wizard_step_description' => 'getWizardStepDescription',
        'wizard_step_title' => 'getWizardStepTitle',
        'config_items' => 'getConfigItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['wizard_step_description'] = isset($data['wizard_step_description']) ? $data['wizard_step_description'] : null;
        $this->container['wizard_step_title'] = isset($data['wizard_step_title']) ? $data['wizard_step_title'] : null;
        $this->container['config_items'] = isset($data['config_items']) ? $data['config_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets wizard_step_description
     *
     * @return string
     */
    public function getWizardStepDescription()
    {
        return $this->container['wizard_step_description'];
    }

    /**
     * Sets wizard_step_description
     *
     * @param string $wizard_step_description wizard_step_description
     *
     * @return $this
     */
    public function setWizardStepDescription($wizard_step_description)
    {
        $this->container['wizard_step_description'] = $wizard_step_description;

        return $this;
    }

    /**
     * Gets wizard_step_title
     *
     * @return string
     */
    public function getWizardStepTitle()
    {
        return $this->container['wizard_step_title'];
    }

    /**
     * Sets wizard_step_title
     *
     * @param string $wizard_step_title wizard_step_title
     *
     * @return $this
     */
    public function setWizardStepTitle($wizard_step_title)
    {
        $this->container['wizard_step_title'] = $wizard_step_title;

        return $this;
    }

    /**
     * Gets config_items
     *
     * @return \Swagger\Client\Model\LinnworksUserConfigItem[]
     */
    public function getConfigItems()
    {
        return $this->container['config_items'];
    }

    /**
     * Sets config_items
     *
     * @param \Swagger\Client\Model\LinnworksUserConfigItem[] $config_items config_items
     *
     * @return $this
     */
    public function setConfigItems($config_items)
    {
        $this->container['config_items'] = $config_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
