<?php
/**
 * LinnworksUserConfigResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LinnworksUserConfigResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LinnworksUserConfigResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LinnworksUserConfigResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'config_status' => 'string',
        'config_stage' => '\Swagger\Client\Model\ConfigStage',
        'error_message' => 'string',
        'is_config_active' => 'bool',
        'is_error' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'config_status' => null,
        'config_stage' => null,
        'error_message' => null,
        'is_config_active' => null,
        'is_error' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'config_status' => 'ConfigStatus',
        'config_stage' => 'ConfigStage',
        'error_message' => 'ErrorMessage',
        'is_config_active' => 'IsConfigActive',
        'is_error' => 'IsError'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'config_status' => 'setConfigStatus',
        'config_stage' => 'setConfigStage',
        'error_message' => 'setErrorMessage',
        'is_config_active' => 'setIsConfigActive',
        'is_error' => 'setIsError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'config_status' => 'getConfigStatus',
        'config_stage' => 'getConfigStage',
        'error_message' => 'getErrorMessage',
        'is_config_active' => 'getIsConfigActive',
        'is_error' => 'getIsError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['config_status'] = isset($data['config_status']) ? $data['config_status'] : null;
        $this->container['config_stage'] = isset($data['config_stage']) ? $data['config_stage'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['is_config_active'] = isset($data['is_config_active']) ? $data['is_config_active'] : null;
        $this->container['is_error'] = isset($data['is_error']) ? $data['is_error'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets config_status
     *
     * @return string
     */
    public function getConfigStatus()
    {
        return $this->container['config_status'];
    }

    /**
     * Sets config_status
     *
     * @param string $config_status config_status
     *
     * @return $this
     */
    public function setConfigStatus($config_status)
    {
        $this->container['config_status'] = $config_status;

        return $this;
    }

    /**
     * Gets config_stage
     *
     * @return \Swagger\Client\Model\ConfigStage
     */
    public function getConfigStage()
    {
        return $this->container['config_stage'];
    }

    /**
     * Sets config_stage
     *
     * @param \Swagger\Client\Model\ConfigStage $config_stage config_stage
     *
     * @return $this
     */
    public function setConfigStage($config_stage)
    {
        $this->container['config_stage'] = $config_stage;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string $error_message error_message
     *
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets is_config_active
     *
     * @return bool
     */
    public function getIsConfigActive()
    {
        return $this->container['is_config_active'];
    }

    /**
     * Sets is_config_active
     *
     * @param bool $is_config_active is_config_active
     *
     * @return $this
     */
    public function setIsConfigActive($is_config_active)
    {
        $this->container['is_config_active'] = $is_config_active;

        return $this;
    }

    /**
     * Gets is_error
     *
     * @return bool
     */
    public function getIsError()
    {
        return $this->container['is_error'];
    }

    /**
     * Sets is_error
     *
     * @param bool $is_error is_error
     *
     * @return $this
     */
    public function setIsError($is_error)
    {
        $this->container['is_error'] = $is_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
