<?php
/**
 * LandedCost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipping Label API
 *
 * Shipping Label application
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LandedCost Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LandedCost implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LandedCost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request_id' => 'string',
        'source_country' => 'string',
        'source_currency' => 'string',
        'destination_country' => 'string',
        'destination_ip' => 'string',
        'destination_currency' => 'string',
        'convert_currency' => 'bool',
        'currency_exchange' => 'string',
        'exchange_rate' => 'string',
        'rate_last_updated' => '\DateTime',
        'vw_units_metric' => 'bool',
        'shipping_value' => '\Swagger\Client\Model\Value',
        'products' => '\Swagger\Client\Model\OrderShipmentInfoResponseProduct[]',
        'product_raw_total' => '\Swagger\Client\Model\Value',
        'calculated_total' => '\Swagger\Client\Model\Value',
        'total_tax' => '\Swagger\Client\Model\Value',
        'total_duty' => '\Swagger\Client\Model\Value',
        'duty_deminimis_value' => '\Swagger\Client\Model\Value',
        'tax_deminimis_value' => '\Swagger\Client\Model\Value',
        'notes' => 'string',
        'generated_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request_id' => null,
        'source_country' => null,
        'source_currency' => null,
        'destination_country' => null,
        'destination_ip' => null,
        'destination_currency' => null,
        'convert_currency' => null,
        'currency_exchange' => null,
        'exchange_rate' => null,
        'rate_last_updated' => 'date-time',
        'vw_units_metric' => null,
        'shipping_value' => null,
        'products' => null,
        'product_raw_total' => null,
        'calculated_total' => null,
        'total_tax' => null,
        'total_duty' => null,
        'duty_deminimis_value' => null,
        'tax_deminimis_value' => null,
        'notes' => null,
        'generated_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_id' => 'requestId',
        'source_country' => 'sourceCountry',
        'source_currency' => 'sourceCurrency',
        'destination_country' => 'destinationCountry',
        'destination_ip' => 'destinationIP',
        'destination_currency' => 'destinationCurrency',
        'convert_currency' => 'convertCurrency',
        'currency_exchange' => 'currencyExchange',
        'exchange_rate' => 'exchangeRate',
        'rate_last_updated' => 'rateLastUpdated',
        'vw_units_metric' => 'vwUnitsMetric',
        'shipping_value' => 'shippingValue',
        'products' => 'products',
        'product_raw_total' => 'productRawTotal',
        'calculated_total' => 'calculatedTotal',
        'total_tax' => 'totalTax',
        'total_duty' => 'totalDuty',
        'duty_deminimis_value' => 'dutyDeminimisValue',
        'tax_deminimis_value' => 'taxDeminimisValue',
        'notes' => 'notes',
        'generated_date' => 'generatedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_id' => 'setRequestId',
        'source_country' => 'setSourceCountry',
        'source_currency' => 'setSourceCurrency',
        'destination_country' => 'setDestinationCountry',
        'destination_ip' => 'setDestinationIp',
        'destination_currency' => 'setDestinationCurrency',
        'convert_currency' => 'setConvertCurrency',
        'currency_exchange' => 'setCurrencyExchange',
        'exchange_rate' => 'setExchangeRate',
        'rate_last_updated' => 'setRateLastUpdated',
        'vw_units_metric' => 'setVwUnitsMetric',
        'shipping_value' => 'setShippingValue',
        'products' => 'setProducts',
        'product_raw_total' => 'setProductRawTotal',
        'calculated_total' => 'setCalculatedTotal',
        'total_tax' => 'setTotalTax',
        'total_duty' => 'setTotalDuty',
        'duty_deminimis_value' => 'setDutyDeminimisValue',
        'tax_deminimis_value' => 'setTaxDeminimisValue',
        'notes' => 'setNotes',
        'generated_date' => 'setGeneratedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_id' => 'getRequestId',
        'source_country' => 'getSourceCountry',
        'source_currency' => 'getSourceCurrency',
        'destination_country' => 'getDestinationCountry',
        'destination_ip' => 'getDestinationIp',
        'destination_currency' => 'getDestinationCurrency',
        'convert_currency' => 'getConvertCurrency',
        'currency_exchange' => 'getCurrencyExchange',
        'exchange_rate' => 'getExchangeRate',
        'rate_last_updated' => 'getRateLastUpdated',
        'vw_units_metric' => 'getVwUnitsMetric',
        'shipping_value' => 'getShippingValue',
        'products' => 'getProducts',
        'product_raw_total' => 'getProductRawTotal',
        'calculated_total' => 'getCalculatedTotal',
        'total_tax' => 'getTotalTax',
        'total_duty' => 'getTotalDuty',
        'duty_deminimis_value' => 'getDutyDeminimisValue',
        'tax_deminimis_value' => 'getTaxDeminimisValue',
        'notes' => 'getNotes',
        'generated_date' => 'getGeneratedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['source_country'] = isset($data['source_country']) ? $data['source_country'] : null;
        $this->container['source_currency'] = isset($data['source_currency']) ? $data['source_currency'] : null;
        $this->container['destination_country'] = isset($data['destination_country']) ? $data['destination_country'] : null;
        $this->container['destination_ip'] = isset($data['destination_ip']) ? $data['destination_ip'] : null;
        $this->container['destination_currency'] = isset($data['destination_currency']) ? $data['destination_currency'] : null;
        $this->container['convert_currency'] = isset($data['convert_currency']) ? $data['convert_currency'] : null;
        $this->container['currency_exchange'] = isset($data['currency_exchange']) ? $data['currency_exchange'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['rate_last_updated'] = isset($data['rate_last_updated']) ? $data['rate_last_updated'] : null;
        $this->container['vw_units_metric'] = isset($data['vw_units_metric']) ? $data['vw_units_metric'] : null;
        $this->container['shipping_value'] = isset($data['shipping_value']) ? $data['shipping_value'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['product_raw_total'] = isset($data['product_raw_total']) ? $data['product_raw_total'] : null;
        $this->container['calculated_total'] = isset($data['calculated_total']) ? $data['calculated_total'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['total_duty'] = isset($data['total_duty']) ? $data['total_duty'] : null;
        $this->container['duty_deminimis_value'] = isset($data['duty_deminimis_value']) ? $data['duty_deminimis_value'] : null;
        $this->container['tax_deminimis_value'] = isset($data['tax_deminimis_value']) ? $data['tax_deminimis_value'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['generated_date'] = isset($data['generated_date']) ? $data['generated_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets source_country
     *
     * @return string
     */
    public function getSourceCountry()
    {
        return $this->container['source_country'];
    }

    /**
     * Sets source_country
     *
     * @param string $source_country source_country
     *
     * @return $this
     */
    public function setSourceCountry($source_country)
    {
        $this->container['source_country'] = $source_country;

        return $this;
    }

    /**
     * Gets source_currency
     *
     * @return string
     */
    public function getSourceCurrency()
    {
        return $this->container['source_currency'];
    }

    /**
     * Sets source_currency
     *
     * @param string $source_currency source_currency
     *
     * @return $this
     */
    public function setSourceCurrency($source_currency)
    {
        $this->container['source_currency'] = $source_currency;

        return $this;
    }

    /**
     * Gets destination_country
     *
     * @return string
     */
    public function getDestinationCountry()
    {
        return $this->container['destination_country'];
    }

    /**
     * Sets destination_country
     *
     * @param string $destination_country destination_country
     *
     * @return $this
     */
    public function setDestinationCountry($destination_country)
    {
        $this->container['destination_country'] = $destination_country;

        return $this;
    }

    /**
     * Gets destination_ip
     *
     * @return string
     */
    public function getDestinationIp()
    {
        return $this->container['destination_ip'];
    }

    /**
     * Sets destination_ip
     *
     * @param string $destination_ip destination_ip
     *
     * @return $this
     */
    public function setDestinationIp($destination_ip)
    {
        $this->container['destination_ip'] = $destination_ip;

        return $this;
    }

    /**
     * Gets destination_currency
     *
     * @return string
     */
    public function getDestinationCurrency()
    {
        return $this->container['destination_currency'];
    }

    /**
     * Sets destination_currency
     *
     * @param string $destination_currency destination_currency
     *
     * @return $this
     */
    public function setDestinationCurrency($destination_currency)
    {
        $this->container['destination_currency'] = $destination_currency;

        return $this;
    }

    /**
     * Gets convert_currency
     *
     * @return bool
     */
    public function getConvertCurrency()
    {
        return $this->container['convert_currency'];
    }

    /**
     * Sets convert_currency
     *
     * @param bool $convert_currency convert_currency
     *
     * @return $this
     */
    public function setConvertCurrency($convert_currency)
    {
        $this->container['convert_currency'] = $convert_currency;

        return $this;
    }

    /**
     * Gets currency_exchange
     *
     * @return string
     */
    public function getCurrencyExchange()
    {
        return $this->container['currency_exchange'];
    }

    /**
     * Sets currency_exchange
     *
     * @param string $currency_exchange currency_exchange
     *
     * @return $this
     */
    public function setCurrencyExchange($currency_exchange)
    {
        $this->container['currency_exchange'] = $currency_exchange;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return string
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param string $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets rate_last_updated
     *
     * @return \DateTime
     */
    public function getRateLastUpdated()
    {
        return $this->container['rate_last_updated'];
    }

    /**
     * Sets rate_last_updated
     *
     * @param \DateTime $rate_last_updated rate_last_updated
     *
     * @return $this
     */
    public function setRateLastUpdated($rate_last_updated)
    {
        $this->container['rate_last_updated'] = $rate_last_updated;

        return $this;
    }

    /**
     * Gets vw_units_metric
     *
     * @return bool
     */
    public function getVwUnitsMetric()
    {
        return $this->container['vw_units_metric'];
    }

    /**
     * Sets vw_units_metric
     *
     * @param bool $vw_units_metric vw_units_metric
     *
     * @return $this
     */
    public function setVwUnitsMetric($vw_units_metric)
    {
        $this->container['vw_units_metric'] = $vw_units_metric;

        return $this;
    }

    /**
     * Gets shipping_value
     *
     * @return \Swagger\Client\Model\Value
     */
    public function getShippingValue()
    {
        return $this->container['shipping_value'];
    }

    /**
     * Sets shipping_value
     *
     * @param \Swagger\Client\Model\Value $shipping_value shipping_value
     *
     * @return $this
     */
    public function setShippingValue($shipping_value)
    {
        $this->container['shipping_value'] = $shipping_value;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Swagger\Client\Model\OrderShipmentInfoResponseProduct[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Swagger\Client\Model\OrderShipmentInfoResponseProduct[] $products products
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets product_raw_total
     *
     * @return \Swagger\Client\Model\Value
     */
    public function getProductRawTotal()
    {
        return $this->container['product_raw_total'];
    }

    /**
     * Sets product_raw_total
     *
     * @param \Swagger\Client\Model\Value $product_raw_total product_raw_total
     *
     * @return $this
     */
    public function setProductRawTotal($product_raw_total)
    {
        $this->container['product_raw_total'] = $product_raw_total;

        return $this;
    }

    /**
     * Gets calculated_total
     *
     * @return \Swagger\Client\Model\Value
     */
    public function getCalculatedTotal()
    {
        return $this->container['calculated_total'];
    }

    /**
     * Sets calculated_total
     *
     * @param \Swagger\Client\Model\Value $calculated_total calculated_total
     *
     * @return $this
     */
    public function setCalculatedTotal($calculated_total)
    {
        $this->container['calculated_total'] = $calculated_total;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return \Swagger\Client\Model\Value
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param \Swagger\Client\Model\Value $total_tax total_tax
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets total_duty
     *
     * @return \Swagger\Client\Model\Value
     */
    public function getTotalDuty()
    {
        return $this->container['total_duty'];
    }

    /**
     * Sets total_duty
     *
     * @param \Swagger\Client\Model\Value $total_duty total_duty
     *
     * @return $this
     */
    public function setTotalDuty($total_duty)
    {
        $this->container['total_duty'] = $total_duty;

        return $this;
    }

    /**
     * Gets duty_deminimis_value
     *
     * @return \Swagger\Client\Model\Value
     */
    public function getDutyDeminimisValue()
    {
        return $this->container['duty_deminimis_value'];
    }

    /**
     * Sets duty_deminimis_value
     *
     * @param \Swagger\Client\Model\Value $duty_deminimis_value duty_deminimis_value
     *
     * @return $this
     */
    public function setDutyDeminimisValue($duty_deminimis_value)
    {
        $this->container['duty_deminimis_value'] = $duty_deminimis_value;

        return $this;
    }

    /**
     * Gets tax_deminimis_value
     *
     * @return \Swagger\Client\Model\Value
     */
    public function getTaxDeminimisValue()
    {
        return $this->container['tax_deminimis_value'];
    }

    /**
     * Sets tax_deminimis_value
     *
     * @param \Swagger\Client\Model\Value $tax_deminimis_value tax_deminimis_value
     *
     * @return $this
     */
    public function setTaxDeminimisValue($tax_deminimis_value)
    {
        $this->container['tax_deminimis_value'] = $tax_deminimis_value;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets generated_date
     *
     * @return \DateTime
     */
    public function getGeneratedDate()
    {
        return $this->container['generated_date'];
    }

    /**
     * Sets generated_date
     *
     * @param \DateTime $generated_date generated_date
     *
     * @return $this
     */
    public function setGeneratedDate($generated_date)
    {
        $this->container['generated_date'] = $generated_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
